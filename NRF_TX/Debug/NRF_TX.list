
NRF_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d24  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003e30  08003e30  00013e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003eb8  08003eb8  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08003eb8  08003eb8  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003eb8  08003eb8  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003eb8  08003eb8  00013eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ebc  08003ebc  00013ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08003ec0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000098  08003f58  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08003f58  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008fc2  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ba1  00000000  00000000  00029083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  0002ac28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002b618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e67  00000000  00000000  0002bf50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a9dd  00000000  00000000  00043db7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008925a  00000000  00000000  0004e794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d79ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b90  00000000  00000000  000d7a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	08003e18 	.word	0x08003e18

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	08003e18 	.word	0x08003e18

0800014c <CS_Select>:
#define NRF24_CSN_PORT   GPIOA
#define NRF24_CSN_PIN    GPIO_PIN_3


void CS_Select (void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	2108      	movs	r1, #8
 8000154:	4802      	ldr	r0, [pc, #8]	; (8000160 <CS_Select+0x14>)
 8000156:	f001 fdab 	bl	8001cb0 <HAL_GPIO_WritePin>
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
 800015e:	bf00      	nop
 8000160:	40010800 	.word	0x40010800

08000164 <CS_UnSelect>:

void CS_UnSelect (void)
{
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8000168:	2201      	movs	r2, #1
 800016a:	2108      	movs	r1, #8
 800016c:	4802      	ldr	r0, [pc, #8]	; (8000178 <CS_UnSelect+0x14>)
 800016e:	f001 fd9f 	bl	8001cb0 <HAL_GPIO_WritePin>
}
 8000172:	bf00      	nop
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	40010800 	.word	0x40010800

0800017c <CE_Enable>:


void CE_Enable (void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8000180:	2201      	movs	r2, #1
 8000182:	2110      	movs	r1, #16
 8000184:	4802      	ldr	r0, [pc, #8]	; (8000190 <CE_Enable+0x14>)
 8000186:	f001 fd93 	bl	8001cb0 <HAL_GPIO_WritePin>
}
 800018a:	bf00      	nop
 800018c:	bd80      	pop	{r7, pc}
 800018e:	bf00      	nop
 8000190:	40010800 	.word	0x40010800

08000194 <CE_Disable>:

void CE_Disable (void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8000198:	2200      	movs	r2, #0
 800019a:	2110      	movs	r1, #16
 800019c:	4802      	ldr	r0, [pc, #8]	; (80001a8 <CE_Disable+0x14>)
 800019e:	f001 fd87 	bl	8001cb0 <HAL_GPIO_WritePin>
}
 80001a2:	bf00      	nop
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	40010800 	.word	0x40010800

080001ac <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	4603      	mov	r3, r0
 80001b4:	460a      	mov	r2, r1
 80001b6:	71fb      	strb	r3, [r7, #7]
 80001b8:	4613      	mov	r3, r2
 80001ba:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	f043 0320 	orr.w	r3, r3, #32
 80001c2:	b2db      	uxtb	r3, r3
 80001c4:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 80001c6:	79bb      	ldrb	r3, [r7, #6]
 80001c8:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80001ca:	f7ff ffbf 	bl	800014c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 80001ce:	f107 010c 	add.w	r1, r7, #12
 80001d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d6:	2202      	movs	r2, #2
 80001d8:	4804      	ldr	r0, [pc, #16]	; (80001ec <nrf24_WriteReg+0x40>)
 80001da:	f002 fbad 	bl	8002938 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80001de:	f7ff ffc1 	bl	8000164 <CS_UnSelect>
}
 80001e2:	bf00      	nop
 80001e4:	3710      	adds	r7, #16
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	20000114 	.word	0x20000114

080001f0 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b086      	sub	sp, #24
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	4603      	mov	r3, r0
 80001f8:	60b9      	str	r1, [r7, #8]
 80001fa:	607a      	str	r2, [r7, #4]
 80001fc:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	f043 0320 	orr.w	r3, r3, #32
 8000204:	b2db      	uxtb	r3, r3
 8000206:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000208:	f7ff ffa0 	bl	800014c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 800020c:	f107 0114 	add.w	r1, r7, #20
 8000210:	2364      	movs	r3, #100	; 0x64
 8000212:	2201      	movs	r2, #1
 8000214:	4808      	ldr	r0, [pc, #32]	; (8000238 <nrf24_WriteRegMulti+0x48>)
 8000216:	f002 fb8f 	bl	8002938 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	b29a      	uxth	r2, r3
 800021e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000222:	68b9      	ldr	r1, [r7, #8]
 8000224:	4804      	ldr	r0, [pc, #16]	; (8000238 <nrf24_WriteRegMulti+0x48>)
 8000226:	f002 fb87 	bl	8002938 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800022a:	f7ff ff9b 	bl	8000164 <CS_UnSelect>
}
 800022e:	bf00      	nop
 8000230:	3718      	adds	r7, #24
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	20000114 	.word	0x20000114

0800023c <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8000246:	2300      	movs	r3, #0
 8000248:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800024a:	f7ff ff7f 	bl	800014c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 800024e:	1df9      	adds	r1, r7, #7
 8000250:	2364      	movs	r3, #100	; 0x64
 8000252:	2201      	movs	r2, #1
 8000254:	4808      	ldr	r0, [pc, #32]	; (8000278 <nrf24_ReadReg+0x3c>)
 8000256:	f002 fb6f 	bl	8002938 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 800025a:	f107 010f 	add.w	r1, r7, #15
 800025e:	2364      	movs	r3, #100	; 0x64
 8000260:	2201      	movs	r2, #1
 8000262:	4805      	ldr	r0, [pc, #20]	; (8000278 <nrf24_ReadReg+0x3c>)
 8000264:	f002 fca4 	bl	8002bb0 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000268:	f7ff ff7c 	bl	8000164 <CS_UnSelect>

	return data;
 800026c:	7bfb      	ldrb	r3, [r7, #15]
}
 800026e:	4618      	mov	r0, r3
 8000270:	3710      	adds	r7, #16
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	20000114 	.word	0x20000114

0800027c <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
 8000282:	4603      	mov	r3, r0
 8000284:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000286:	f7ff ff61 	bl	800014c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 800028a:	1df9      	adds	r1, r7, #7
 800028c:	2364      	movs	r3, #100	; 0x64
 800028e:	2201      	movs	r2, #1
 8000290:	4804      	ldr	r0, [pc, #16]	; (80002a4 <nrfsendCmd+0x28>)
 8000292:	f002 fb51 	bl	8002938 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000296:	f7ff ff65 	bl	8000164 <CS_UnSelect>
}
 800029a:	bf00      	nop
 800029c:	3708      	adds	r7, #8
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	20000114 	.word	0x20000114

080002a8 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b088      	sub	sp, #32
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	2b07      	cmp	r3, #7
 80002b6:	d104      	bne.n	80002c2 <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 80002b8:	2100      	movs	r1, #0
 80002ba:	2007      	movs	r0, #7
 80002bc:	f7ff ff76 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 80002c0:	e090      	b.n	80003e4 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	2b17      	cmp	r3, #23
 80002c6:	d104      	bne.n	80002d2 <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 80002c8:	2111      	movs	r1, #17
 80002ca:	2017      	movs	r0, #23
 80002cc:	f7ff ff6e 	bl	80001ac <nrf24_WriteReg>
}
 80002d0:	e088      	b.n	80003e4 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 80002d2:	2108      	movs	r1, #8
 80002d4:	2000      	movs	r0, #0
 80002d6:	f7ff ff69 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 80002da:	213f      	movs	r1, #63	; 0x3f
 80002dc:	2001      	movs	r0, #1
 80002de:	f7ff ff65 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 80002e2:	2103      	movs	r1, #3
 80002e4:	2002      	movs	r0, #2
 80002e6:	f7ff ff61 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 80002ea:	2103      	movs	r1, #3
 80002ec:	2003      	movs	r0, #3
 80002ee:	f7ff ff5d 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 80002f2:	2103      	movs	r1, #3
 80002f4:	2004      	movs	r0, #4
 80002f6:	f7ff ff59 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 80002fa:	2102      	movs	r1, #2
 80002fc:	2005      	movs	r0, #5
 80002fe:	f7ff ff55 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 8000302:	210e      	movs	r1, #14
 8000304:	2006      	movs	r0, #6
 8000306:	f7ff ff51 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 800030a:	2100      	movs	r1, #0
 800030c:	2007      	movs	r0, #7
 800030e:	f7ff ff4d 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8000312:	2100      	movs	r1, #0
 8000314:	2008      	movs	r0, #8
 8000316:	f7ff ff49 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 800031a:	2100      	movs	r1, #0
 800031c:	2009      	movs	r0, #9
 800031e:	f7ff ff45 	bl	80001ac <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000322:	4a32      	ldr	r2, [pc, #200]	; (80003ec <nrf24_reset+0x144>)
 8000324:	f107 0318 	add.w	r3, r7, #24
 8000328:	e892 0003 	ldmia.w	r2, {r0, r1}
 800032c:	6018      	str	r0, [r3, #0]
 800032e:	3304      	adds	r3, #4
 8000330:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 8000332:	f107 0318 	add.w	r3, r7, #24
 8000336:	2205      	movs	r2, #5
 8000338:	4619      	mov	r1, r3
 800033a:	200a      	movs	r0, #10
 800033c:	f7ff ff58 	bl	80001f0 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000340:	4a2b      	ldr	r2, [pc, #172]	; (80003f0 <nrf24_reset+0x148>)
 8000342:	f107 0310 	add.w	r3, r7, #16
 8000346:	e892 0003 	ldmia.w	r2, {r0, r1}
 800034a:	6018      	str	r0, [r3, #0]
 800034c:	3304      	adds	r3, #4
 800034e:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8000350:	f107 0310 	add.w	r3, r7, #16
 8000354:	2205      	movs	r2, #5
 8000356:	4619      	mov	r1, r3
 8000358:	200b      	movs	r0, #11
 800035a:	f7ff ff49 	bl	80001f0 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 800035e:	21c3      	movs	r1, #195	; 0xc3
 8000360:	200c      	movs	r0, #12
 8000362:	f7ff ff23 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 8000366:	21c4      	movs	r1, #196	; 0xc4
 8000368:	200d      	movs	r0, #13
 800036a:	f7ff ff1f 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 800036e:	21c5      	movs	r1, #197	; 0xc5
 8000370:	200e      	movs	r0, #14
 8000372:	f7ff ff1b 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 8000376:	21c6      	movs	r1, #198	; 0xc6
 8000378:	200f      	movs	r0, #15
 800037a:	f7ff ff17 	bl	80001ac <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800037e:	4a1b      	ldr	r2, [pc, #108]	; (80003ec <nrf24_reset+0x144>)
 8000380:	f107 0308 	add.w	r3, r7, #8
 8000384:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000388:	6018      	str	r0, [r3, #0]
 800038a:	3304      	adds	r3, #4
 800038c:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 800038e:	f107 0308 	add.w	r3, r7, #8
 8000392:	2205      	movs	r2, #5
 8000394:	4619      	mov	r1, r3
 8000396:	2010      	movs	r0, #16
 8000398:	f7ff ff2a 	bl	80001f0 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 800039c:	2100      	movs	r1, #0
 800039e:	2011      	movs	r0, #17
 80003a0:	f7ff ff04 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 80003a4:	2100      	movs	r1, #0
 80003a6:	2012      	movs	r0, #18
 80003a8:	f7ff ff00 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 80003ac:	2100      	movs	r1, #0
 80003ae:	2013      	movs	r0, #19
 80003b0:	f7ff fefc 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 80003b4:	2100      	movs	r1, #0
 80003b6:	2014      	movs	r0, #20
 80003b8:	f7ff fef8 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 80003bc:	2100      	movs	r1, #0
 80003be:	2015      	movs	r0, #21
 80003c0:	f7ff fef4 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 80003c4:	2100      	movs	r1, #0
 80003c6:	2016      	movs	r0, #22
 80003c8:	f7ff fef0 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 80003cc:	2111      	movs	r1, #17
 80003ce:	2017      	movs	r0, #23
 80003d0:	f7ff feec 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 80003d4:	2100      	movs	r1, #0
 80003d6:	201c      	movs	r0, #28
 80003d8:	f7ff fee8 	bl	80001ac <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 80003dc:	2100      	movs	r1, #0
 80003de:	201d      	movs	r0, #29
 80003e0:	f7ff fee4 	bl	80001ac <nrf24_WriteReg>
}
 80003e4:	bf00      	nop
 80003e6:	3720      	adds	r7, #32
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	08003e30 	.word	0x08003e30
 80003f0:	08003e38 	.word	0x08003e38

080003f4 <NRF24_Init>:




void NRF24_Init (void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 80003f8:	f7ff fecc 	bl	8000194 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 80003fc:	2000      	movs	r0, #0
 80003fe:	f7ff ff53 	bl	80002a8 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 8000402:	2100      	movs	r1, #0
 8000404:	2000      	movs	r0, #0
 8000406:	f7ff fed1 	bl	80001ac <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 800040a:	2100      	movs	r1, #0
 800040c:	2001      	movs	r0, #1
 800040e:	f7ff fecd 	bl	80001ac <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 8000412:	2100      	movs	r1, #0
 8000414:	2002      	movs	r0, #2
 8000416:	f7ff fec9 	bl	80001ac <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 800041a:	2103      	movs	r1, #3
 800041c:	2003      	movs	r0, #3
 800041e:	f7ff fec5 	bl	80001ac <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 8000422:	2100      	movs	r1, #0
 8000424:	2004      	movs	r0, #4
 8000426:	f7ff fec1 	bl	80001ac <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 800042a:	2100      	movs	r1, #0
 800042c:	2005      	movs	r0, #5
 800042e:	f7ff febd 	bl	80001ac <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 8000432:	210e      	movs	r1, #14
 8000434:	2006      	movs	r0, #6
 8000436:	f7ff feb9 	bl	80001ac <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 800043a:	f7ff fe9f 	bl	800017c <CE_Enable>

}
 800043e:	bf00      	nop
 8000440:	bd80      	pop	{r7, pc}

08000442 <NRF24_TxMode>:


// set up the Tx mode

void NRF24_TxMode (uint8_t *Address, uint8_t channel)
{
 8000442:	b580      	push	{r7, lr}
 8000444:	b084      	sub	sp, #16
 8000446:	af00      	add	r7, sp, #0
 8000448:	6078      	str	r0, [r7, #4]
 800044a:	460b      	mov	r3, r1
 800044c:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 800044e:	f7ff fea1 	bl	8000194 <CE_Disable>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8000452:	78fb      	ldrb	r3, [r7, #3]
 8000454:	4619      	mov	r1, r3
 8000456:	2005      	movs	r0, #5
 8000458:	f7ff fea8 	bl	80001ac <nrf24_WriteReg>

	nrf24_WriteRegMulti(TX_ADDR, Address, 5);  // Write the TX address
 800045c:	2205      	movs	r2, #5
 800045e:	6879      	ldr	r1, [r7, #4]
 8000460:	2010      	movs	r0, #16
 8000462:	f7ff fec5 	bl	80001f0 <nrf24_WriteRegMulti>


	// power up the device
	uint8_t config = nrf24_ReadReg(CONFIG);
 8000466:	2000      	movs	r0, #0
 8000468:	f7ff fee8 	bl	800023c <nrf24_ReadReg>
 800046c:	4603      	mov	r3, r0
 800046e:	73fb      	strb	r3, [r7, #15]
//	config = config | (1<<1);   // write 1 in the PWR_UP bit
	config = config & (0xF2);    // write 0 in the PRIM_RX, and 1 in the PWR_UP, and all other bits are masked
 8000470:	7bfb      	ldrb	r3, [r7, #15]
 8000472:	f023 030d 	bic.w	r3, r3, #13
 8000476:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (CONFIG, config);
 8000478:	7bfb      	ldrb	r3, [r7, #15]
 800047a:	4619      	mov	r1, r3
 800047c:	2000      	movs	r0, #0
 800047e:	f7ff fe95 	bl	80001ac <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000482:	f7ff fe7b 	bl	800017c <CE_Enable>
}
 8000486:	bf00      	nop
 8000488:	3710      	adds	r7, #16
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
	...

08000490 <NRF24_Transmit>:


// transmit the data

uint8_t NRF24_Transmit (uint8_t *data, uint16_t wsize)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
 8000498:	460b      	mov	r3, r1
 800049a:	807b      	strh	r3, [r7, #2]
	uint8_t cmdtosend = 0;
 800049c:	2300      	movs	r3, #0
 800049e:	73bb      	strb	r3, [r7, #14]

	// select the device
	CS_Select();
 80004a0:	f7ff fe54 	bl	800014c <CS_Select>

	// payload command
	cmdtosend = W_TX_PAYLOAD;
 80004a4:	23a0      	movs	r3, #160	; 0xa0
 80004a6:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 80004a8:	f107 010e 	add.w	r1, r7, #14
 80004ac:	2364      	movs	r3, #100	; 0x64
 80004ae:	2201      	movs	r2, #1
 80004b0:	4816      	ldr	r0, [pc, #88]	; (800050c <NRF24_Transmit+0x7c>)
 80004b2:	f002 fa41 	bl	8002938 <HAL_SPI_Transmit>

	// send the payload
	HAL_SPI_Transmit(NRF24_SPI, data, wsize, 1000);
 80004b6:	887a      	ldrh	r2, [r7, #2]
 80004b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004bc:	6879      	ldr	r1, [r7, #4]
 80004be:	4813      	ldr	r0, [pc, #76]	; (800050c <NRF24_Transmit+0x7c>)
 80004c0:	f002 fa3a 	bl	8002938 <HAL_SPI_Transmit>

	// Unselect the device
	CS_UnSelect();
 80004c4:	f7ff fe4e 	bl	8000164 <CS_UnSelect>

	HAL_Delay(1);
 80004c8:	2001      	movs	r0, #1
 80004ca:	f000 fce3 	bl	8000e94 <HAL_Delay>

	uint8_t fifostatus = nrf24_ReadReg(FIFO_STATUS);
 80004ce:	2017      	movs	r0, #23
 80004d0:	f7ff feb4 	bl	800023c <nrf24_ReadReg>
 80004d4:	4603      	mov	r3, r0
 80004d6:	73fb      	strb	r3, [r7, #15]

	// check the fourth bit of FIFO_STATUS to know if the TX fifo is empty
	if ((fifostatus&(1<<4)) && (!(fifostatus&(1<<3))))
 80004d8:	7bfb      	ldrb	r3, [r7, #15]
 80004da:	f003 0310 	and.w	r3, r3, #16
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d00f      	beq.n	8000502 <NRF24_Transmit+0x72>
 80004e2:	7bfb      	ldrb	r3, [r7, #15]
 80004e4:	f003 0308 	and.w	r3, r3, #8
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d10a      	bne.n	8000502 <NRF24_Transmit+0x72>
	{
		cmdtosend = FLUSH_TX;
 80004ec:	23e1      	movs	r3, #225	; 0xe1
 80004ee:	73bb      	strb	r3, [r7, #14]
		nrfsendCmd(cmdtosend);
 80004f0:	7bbb      	ldrb	r3, [r7, #14]
 80004f2:	4618      	mov	r0, r3
 80004f4:	f7ff fec2 	bl	800027c <nrfsendCmd>

		// reset FIFO_STATUS
		nrf24_reset (FIFO_STATUS);
 80004f8:	2017      	movs	r0, #23
 80004fa:	f7ff fed5 	bl	80002a8 <nrf24_reset>

		return 1;
 80004fe:	2301      	movs	r3, #1
 8000500:	e000      	b.n	8000504 <NRF24_Transmit+0x74>
	}

	return 0;
 8000502:	2300      	movs	r3, #0
}
 8000504:	4618      	mov	r0, r3
 8000506:	3710      	adds	r7, #16
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000114 	.word	0x20000114

08000510 <Read_ADC>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Read_ADC()
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	sConfigPrivate.Rank = ADC_REGULAR_RANK_1;
 8000514:	4b1b      	ldr	r3, [pc, #108]	; (8000584 <Read_ADC+0x74>)
 8000516:	2201      	movs	r2, #1
 8000518:	605a      	str	r2, [r3, #4]
	sConfigPrivate.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800051a:	4b1a      	ldr	r3, [pc, #104]	; (8000584 <Read_ADC+0x74>)
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]

	sConfigPrivate.Channel = ADC_CHANNEL_1;
 8000520:	4b18      	ldr	r3, [pc, #96]	; (8000584 <Read_ADC+0x74>)
 8000522:	2201      	movs	r2, #1
 8000524:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc2, &sConfigPrivate);
 8000526:	4917      	ldr	r1, [pc, #92]	; (8000584 <Read_ADC+0x74>)
 8000528:	4817      	ldr	r0, [pc, #92]	; (8000588 <Read_ADC+0x78>)
 800052a:	f000 ff9b 	bl	8001464 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc2);
 800052e:	4816      	ldr	r0, [pc, #88]	; (8000588 <Read_ADC+0x78>)
 8000530:	f000 fdac 	bl	800108c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 100);
 8000534:	2164      	movs	r1, #100	; 0x64
 8000536:	4814      	ldr	r0, [pc, #80]	; (8000588 <Read_ADC+0x78>)
 8000538:	f000 fe82 	bl	8001240 <HAL_ADC_PollForConversion>
	JOY_X = HAL_ADC_GetValue(&hadc2);
 800053c:	4812      	ldr	r0, [pc, #72]	; (8000588 <Read_ADC+0x78>)
 800053e:	f000 ff85 	bl	800144c <HAL_ADC_GetValue>
 8000542:	4603      	mov	r3, r0
 8000544:	b29a      	uxth	r2, r3
 8000546:	4b11      	ldr	r3, [pc, #68]	; (800058c <Read_ADC+0x7c>)
 8000548:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc2);
 800054a:	480f      	ldr	r0, [pc, #60]	; (8000588 <Read_ADC+0x78>)
 800054c:	f000 fe4c 	bl	80011e8 <HAL_ADC_Stop>

	sConfigPrivate.Channel = ADC_CHANNEL_2;
 8000550:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <Read_ADC+0x74>)
 8000552:	2202      	movs	r2, #2
 8000554:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc2, &sConfigPrivate);
 8000556:	490b      	ldr	r1, [pc, #44]	; (8000584 <Read_ADC+0x74>)
 8000558:	480b      	ldr	r0, [pc, #44]	; (8000588 <Read_ADC+0x78>)
 800055a:	f000 ff83 	bl	8001464 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc2);
 800055e:	480a      	ldr	r0, [pc, #40]	; (8000588 <Read_ADC+0x78>)
 8000560:	f000 fd94 	bl	800108c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 100);
 8000564:	2164      	movs	r1, #100	; 0x64
 8000566:	4808      	ldr	r0, [pc, #32]	; (8000588 <Read_ADC+0x78>)
 8000568:	f000 fe6a 	bl	8001240 <HAL_ADC_PollForConversion>
	JOY_Y = HAL_ADC_GetValue(&hadc2);
 800056c:	4806      	ldr	r0, [pc, #24]	; (8000588 <Read_ADC+0x78>)
 800056e:	f000 ff6d 	bl	800144c <HAL_ADC_GetValue>
 8000572:	4603      	mov	r3, r0
 8000574:	b29a      	uxth	r2, r3
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <Read_ADC+0x80>)
 8000578:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc2);
 800057a:	4803      	ldr	r0, [pc, #12]	; (8000588 <Read_ADC+0x78>)
 800057c:	f000 fe34 	bl	80011e8 <HAL_ADC_Stop>

	//sprintf(BT_Data, "\f %d \n %d \n\r",JOY_X,JOY_Y);
	//HAL_UART_Transmit(&huart1, (uint8_t*)BT_Data, sizeof(BT_Data), 100);
}
 8000580:	bf00      	nop
 8000582:	bd80      	pop	{r7, pc}
 8000584:	200001b8 	.word	0x200001b8
 8000588:	200000e4 	.word	0x200000e4
 800058c:	200001b2 	.word	0x200001b2
 8000590:	200001b4 	.word	0x200001b4

08000594 <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BTN_1_Pin)
 800059e:	88fb      	ldrh	r3, [r7, #6]
 80005a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80005a4:	d10b      	bne.n	80005be <HAL_GPIO_EXTI_Callback+0x2a>
	{
		HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ac:	480e      	ldr	r0, [pc, #56]	; (80005e8 <HAL_GPIO_EXTI_Callback+0x54>)
 80005ae:	f001 fb7f 	bl	8001cb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_SET);
 80005b2:	2201      	movs	r2, #1
 80005b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005b8:	480b      	ldr	r0, [pc, #44]	; (80005e8 <HAL_GPIO_EXTI_Callback+0x54>)
 80005ba:	f001 fb79 	bl	8001cb0 <HAL_GPIO_WritePin>

	}

	if(GPIO_Pin == BTN_2_Pin)
 80005be:	88fb      	ldrh	r3, [r7, #6]
 80005c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80005c4:	d10b      	bne.n	80005de <HAL_GPIO_EXTI_Callback+0x4a>
	{
		HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005cc:	4806      	ldr	r0, [pc, #24]	; (80005e8 <HAL_GPIO_EXTI_Callback+0x54>)
 80005ce:	f001 fb6f 	bl	8001cb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, GPIO_PIN_SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005d8:	4803      	ldr	r0, [pc, #12]	; (80005e8 <HAL_GPIO_EXTI_Callback+0x54>)
 80005da:	f001 fb69 	bl	8001cb0 <HAL_GPIO_WritePin>

	}


}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40010c00 	.word	0x40010c00

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fbed 	bl	8000dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f84d 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 f983 	bl	8000904 <MX_GPIO_Init>
  MX_SPI1_Init();
 80005fe:	f000 f921 	bl	8000844 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000602:	f000 f8a3 	bl	800074c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000606:	f000 f953 	bl	80008b0 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 800060a:	f000 f8dd 	bl	80007c8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
//************************************************************************************************//

  	HAL_ADC_Start(&hadc1);
 800060e:	4819      	ldr	r0, [pc, #100]	; (8000674 <main+0x88>)
 8000610:	f000 fd3c 	bl	800108c <HAL_ADC_Start>
  	HAL_ADC_Start(&hadc2);
 8000614:	4818      	ldr	r0, [pc, #96]	; (8000678 <main+0x8c>)
 8000616:	f000 fd39 	bl	800108c <HAL_ADC_Start>
	NRF24_Init();
 800061a:	f7ff feeb 	bl	80003f4 <NRF24_Init>
	//NRF24_RxMode(RxAddress, 10);
	NRF24_TxMode(TxAddress, 10);
 800061e:	210a      	movs	r1, #10
 8000620:	4816      	ldr	r0, [pc, #88]	; (800067c <main+0x90>)
 8000622:	f7ff ff0e 	bl	8000442 <NRF24_TxMode>
	  /*
	   * ANA BLUEPILL KODU
	   */


	  if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8000626:	2164      	movs	r1, #100	; 0x64
 8000628:	4812      	ldr	r0, [pc, #72]	; (8000674 <main+0x88>)
 800062a:	f000 fe09 	bl	8001240 <HAL_ADC_PollForConversion>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d1f8      	bne.n	8000626 <main+0x3a>
	  {
		 joystick_x = HAL_ADC_GetValue(&hadc1);	// joystickden gelen verileri okuma **unsigned short**
 8000634:	480f      	ldr	r0, [pc, #60]	; (8000674 <main+0x88>)
 8000636:	f000 ff09 	bl	800144c <HAL_ADC_GetValue>
 800063a:	4603      	mov	r3, r0
 800063c:	b29a      	uxth	r2, r3
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <main+0x94>)
 8000640:	801a      	strh	r2, [r3, #0]

		 Read_ADC();
 8000642:	f7ff ff65 	bl	8000510 <Read_ADC>

		 sprintf(BT_Data, "%d,%d,%d", joystick_x, JOY_X, JOY_Y);
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <main+0x94>)
 8000648:	881b      	ldrh	r3, [r3, #0]
 800064a:	461a      	mov	r2, r3
 800064c:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <main+0x98>)
 800064e:	881b      	ldrh	r3, [r3, #0]
 8000650:	4619      	mov	r1, r3
 8000652:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <main+0x9c>)
 8000654:	881b      	ldrh	r3, [r3, #0]
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	460b      	mov	r3, r1
 800065a:	490c      	ldr	r1, [pc, #48]	; (800068c <main+0xa0>)
 800065c:	480c      	ldr	r0, [pc, #48]	; (8000690 <main+0xa4>)
 800065e:	f002 ff61 	bl	8003524 <siprintf>
		 //    "\f %d \n\r"
		 //sprintf(BT_Data, "%d", joystick_x); //sprintf ile char dizisine atma **VAR1**
		 //memcpy(PotData, &joystick_x, sizeof(joystick_x)); // memcpy ile PotData dizisine atma **VAR2**


		 NRF24_Transmit((uint8_t*)BT_Data, sizeof(BT_Data)); // uint8_t ye çevirip spi ile gönderme
 8000662:	2120      	movs	r1, #32
 8000664:	480a      	ldr	r0, [pc, #40]	; (8000690 <main+0xa4>)
 8000666:	f7ff ff13 	bl	8000490 <NRF24_Transmit>
		 //HAL_Delay(1000);
		 //NRF24_Transmit(PotData, sizeof(PotData)); //
		 //HAL_UART_Transmit(&huart1, (uint8_t*)BT_Data, strlen(BT_Data), 1000);
		 HAL_Delay(3);
 800066a:	2003      	movs	r0, #3
 800066c:	f000 fc12 	bl	8000e94 <HAL_Delay>
	  if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8000670:	e7d9      	b.n	8000626 <main+0x3a>
 8000672:	bf00      	nop
 8000674:	200000b4 	.word	0x200000b4
 8000678:	200000e4 	.word	0x200000e4
 800067c:	20000020 	.word	0x20000020
 8000680:	200001b0 	.word	0x200001b0
 8000684:	200001b2 	.word	0x200001b2
 8000688:	200001b4 	.word	0x200001b4
 800068c:	08003e40 	.word	0x08003e40
 8000690:	20000000 	.word	0x20000000

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	; 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800069e:	2228      	movs	r2, #40	; 0x28
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 ff36 	bl	8003514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c4:	2301      	movs	r3, #1
 80006c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d2:	2301      	movs	r3, #1
 80006d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d6:	2302      	movs	r3, #2
 80006d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006e0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 fb10 	bl	8001d10 <HAL_RCC_OscConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006f6:	f000 f99f 	bl	8000a38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fa:	230f      	movs	r3, #15
 80006fc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fe:	2302      	movs	r3, #2
 8000700:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800070a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	2102      	movs	r1, #2
 8000716:	4618      	mov	r0, r3
 8000718:	f001 fd7c 	bl	8002214 <HAL_RCC_ClockConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000722:	f000 f989 	bl	8000a38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000726:	2302      	movs	r3, #2
 8000728:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800072a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800072e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	4618      	mov	r0, r3
 8000734:	f001 ff06 	bl	8002544 <HAL_RCCEx_PeriphCLKConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800073e:	f000 f97b 	bl	8000a38 <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3750      	adds	r7, #80	; 0x50
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800075c:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <MX_ADC1_Init+0x74>)
 800075e:	4a19      	ldr	r2, [pc, #100]	; (80007c4 <MX_ADC1_Init+0x78>)
 8000760:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000762:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <MX_ADC1_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <MX_ADC1_Init+0x74>)
 800076a:	2201      	movs	r2, #1
 800076c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800076e:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_ADC1_Init+0x74>)
 8000770:	2200      	movs	r2, #0
 8000772:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MX_ADC1_Init+0x74>)
 8000776:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800077a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800077c:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <MX_ADC1_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_ADC1_Init+0x74>)
 8000784:	2201      	movs	r2, #1
 8000786:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000788:	480d      	ldr	r0, [pc, #52]	; (80007c0 <MX_ADC1_Init+0x74>)
 800078a:	f000 fba7 	bl	8000edc <HAL_ADC_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000794:	f000 f950 	bl	8000a38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000798:	2308      	movs	r3, #8
 800079a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800079c:	2301      	movs	r3, #1
 800079e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80007a0:	2307      	movs	r3, #7
 80007a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	4619      	mov	r1, r3
 80007a8:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_ADC1_Init+0x74>)
 80007aa:	f000 fe5b 	bl	8001464 <HAL_ADC_ConfigChannel>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80007b4:	f000 f940 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200000b4 	.word	0x200000b4
 80007c4:	40012400 	.word	0x40012400

080007c8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80007d8:	4b18      	ldr	r3, [pc, #96]	; (800083c <MX_ADC2_Init+0x74>)
 80007da:	4a19      	ldr	r2, [pc, #100]	; (8000840 <MX_ADC2_Init+0x78>)
 80007dc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007de:	4b17      	ldr	r3, [pc, #92]	; (800083c <MX_ADC2_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80007e4:	4b15      	ldr	r3, [pc, #84]	; (800083c <MX_ADC2_Init+0x74>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007ea:	4b14      	ldr	r3, [pc, #80]	; (800083c <MX_ADC2_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f0:	4b12      	ldr	r3, [pc, #72]	; (800083c <MX_ADC2_Init+0x74>)
 80007f2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80007f6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007f8:	4b10      	ldr	r3, [pc, #64]	; (800083c <MX_ADC2_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <MX_ADC2_Init+0x74>)
 8000800:	2201      	movs	r2, #1
 8000802:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000804:	480d      	ldr	r0, [pc, #52]	; (800083c <MX_ADC2_Init+0x74>)
 8000806:	f000 fb69 	bl	8000edc <HAL_ADC_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000810:	f000 f912 	bl	8000a38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000814:	2301      	movs	r3, #1
 8000816:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000818:	2301      	movs	r3, #1
 800081a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	4619      	mov	r1, r3
 8000824:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_ADC2_Init+0x74>)
 8000826:	f000 fe1d 	bl	8001464 <HAL_ADC_ConfigChannel>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000830:	f000 f902 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	200000e4 	.word	0x200000e4
 8000840:	40012800 	.word	0x40012800

08000844 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000848:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <MX_SPI1_Init+0x64>)
 800084a:	4a18      	ldr	r2, [pc, #96]	; (80008ac <MX_SPI1_Init+0x68>)
 800084c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800084e:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <MX_SPI1_Init+0x64>)
 8000850:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000854:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_SPI1_Init+0x64>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_SPI1_Init+0x64>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_SPI1_Init+0x64>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_SPI1_Init+0x64>)
 800086a:	2200      	movs	r2, #0
 800086c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_SPI1_Init+0x64>)
 8000870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000874:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_SPI1_Init+0x64>)
 8000878:	2218      	movs	r2, #24
 800087a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <MX_SPI1_Init+0x64>)
 800087e:	2200      	movs	r2, #0
 8000880:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_SPI1_Init+0x64>)
 8000884:	2200      	movs	r2, #0
 8000886:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000888:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <MX_SPI1_Init+0x64>)
 800088a:	2200      	movs	r2, #0
 800088c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_SPI1_Init+0x64>)
 8000890:	220a      	movs	r2, #10
 8000892:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <MX_SPI1_Init+0x64>)
 8000896:	f001 ffcb 	bl	8002830 <HAL_SPI_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008a0:	f000 f8ca 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000114 	.word	0x20000114
 80008ac:	40013000 	.word	0x40013000

080008b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	; (8000900 <MX_USART1_UART_Init+0x50>)
 80008b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008e8:	f002 fd0e 	bl	8003308 <HAL_UART_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008f2:	f000 f8a1 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	2000016c 	.word	0x2000016c
 8000900:	40013800 	.word	0x40013800

08000904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b088      	sub	sp, #32
 8000908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 0310 	add.w	r3, r7, #16
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000918:	4b42      	ldr	r3, [pc, #264]	; (8000a24 <MX_GPIO_Init+0x120>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	4a41      	ldr	r2, [pc, #260]	; (8000a24 <MX_GPIO_Init+0x120>)
 800091e:	f043 0310 	orr.w	r3, r3, #16
 8000922:	6193      	str	r3, [r2, #24]
 8000924:	4b3f      	ldr	r3, [pc, #252]	; (8000a24 <MX_GPIO_Init+0x120>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	f003 0310 	and.w	r3, r3, #16
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000930:	4b3c      	ldr	r3, [pc, #240]	; (8000a24 <MX_GPIO_Init+0x120>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	4a3b      	ldr	r2, [pc, #236]	; (8000a24 <MX_GPIO_Init+0x120>)
 8000936:	f043 0320 	orr.w	r3, r3, #32
 800093a:	6193      	str	r3, [r2, #24]
 800093c:	4b39      	ldr	r3, [pc, #228]	; (8000a24 <MX_GPIO_Init+0x120>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f003 0320 	and.w	r3, r3, #32
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000948:	4b36      	ldr	r3, [pc, #216]	; (8000a24 <MX_GPIO_Init+0x120>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	4a35      	ldr	r2, [pc, #212]	; (8000a24 <MX_GPIO_Init+0x120>)
 800094e:	f043 0304 	orr.w	r3, r3, #4
 8000952:	6193      	str	r3, [r2, #24]
 8000954:	4b33      	ldr	r3, [pc, #204]	; (8000a24 <MX_GPIO_Init+0x120>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	f003 0304 	and.w	r3, r3, #4
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000960:	4b30      	ldr	r3, [pc, #192]	; (8000a24 <MX_GPIO_Init+0x120>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	4a2f      	ldr	r2, [pc, #188]	; (8000a24 <MX_GPIO_Init+0x120>)
 8000966:	f043 0308 	orr.w	r3, r3, #8
 800096a:	6193      	str	r3, [r2, #24]
 800096c:	4b2d      	ldr	r3, [pc, #180]	; (8000a24 <MX_GPIO_Init+0x120>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	f003 0308 	and.w	r3, r3, #8
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000978:	2201      	movs	r2, #1
 800097a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800097e:	482a      	ldr	r0, [pc, #168]	; (8000a28 <MX_GPIO_Init+0x124>)
 8000980:	f001 f996 	bl	8001cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	2118      	movs	r1, #24
 8000988:	4828      	ldr	r0, [pc, #160]	; (8000a2c <MX_GPIO_Init+0x128>)
 800098a:	f001 f991 	bl	8001cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BLUE_Pin|GREEN_Pin|RED_Pin, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	f640 4102 	movw	r1, #3074	; 0xc02
 8000994:	4826      	ldr	r0, [pc, #152]	; (8000a30 <MX_GPIO_Init+0x12c>)
 8000996:	f001 f98b 	bl	8001cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800099a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800099e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a0:	2301      	movs	r3, #1
 80009a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2302      	movs	r3, #2
 80009aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ac:	f107 0310 	add.w	r3, r7, #16
 80009b0:	4619      	mov	r1, r3
 80009b2:	481d      	ldr	r0, [pc, #116]	; (8000a28 <MX_GPIO_Init+0x124>)
 80009b4:	f000 fff8 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_1_Pin BTN_2_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin|BTN_2_Pin;
 80009b8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80009bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009be:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <MX_GPIO_Init+0x130>)
 80009c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009c2:	2302      	movs	r3, #2
 80009c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c6:	f107 0310 	add.w	r3, r7, #16
 80009ca:	4619      	mov	r1, r3
 80009cc:	4816      	ldr	r0, [pc, #88]	; (8000a28 <MX_GPIO_Init+0x124>)
 80009ce:	f000 ffeb 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin CE_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
 80009d2:	2318      	movs	r3, #24
 80009d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2302      	movs	r3, #2
 80009e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	f107 0310 	add.w	r3, r7, #16
 80009e6:	4619      	mov	r1, r3
 80009e8:	4810      	ldr	r0, [pc, #64]	; (8000a2c <MX_GPIO_Init+0x128>)
 80009ea:	f000 ffdd 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLUE_Pin GREEN_Pin RED_Pin */
  GPIO_InitStruct.Pin = BLUE_Pin|GREEN_Pin|RED_Pin;
 80009ee:	f640 4302 	movw	r3, #3074	; 0xc02
 80009f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2302      	movs	r3, #2
 80009fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a00:	f107 0310 	add.w	r3, r7, #16
 8000a04:	4619      	mov	r1, r3
 8000a06:	480a      	ldr	r0, [pc, #40]	; (8000a30 <MX_GPIO_Init+0x12c>)
 8000a08:	f000 ffce 	bl	80019a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2100      	movs	r1, #0
 8000a10:	2028      	movs	r0, #40	; 0x28
 8000a12:	f000 ff92 	bl	800193a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a16:	2028      	movs	r0, #40	; 0x28
 8000a18:	f000 ffab 	bl	8001972 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a1c:	bf00      	nop
 8000a1e:	3720      	adds	r7, #32
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40021000 	.word	0x40021000
 8000a28:	40011000 	.word	0x40011000
 8000a2c:	40010800 	.word	0x40010800
 8000a30:	40010c00 	.word	0x40010c00
 8000a34:	10110000 	.word	0x10110000

08000a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3c:	b672      	cpsid	i
}
 8000a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <Error_Handler+0x8>
	...

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <HAL_MspInit+0x5c>)
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	4a14      	ldr	r2, [pc, #80]	; (8000aa0 <HAL_MspInit+0x5c>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6193      	str	r3, [r2, #24]
 8000a56:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <HAL_MspInit+0x5c>)
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a62:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <HAL_MspInit+0x5c>)
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <HAL_MspInit+0x5c>)
 8000a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6c:	61d3      	str	r3, [r2, #28]
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <HAL_MspInit+0x5c>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <HAL_MspInit+0x60>)
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <HAL_MspInit+0x60>)
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a96:	bf00      	nop
 8000a98:	3714      	adds	r7, #20
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40010000 	.word	0x40010000

08000aa8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	; 0x28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0318 	add.w	r3, r7, #24
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a28      	ldr	r2, [pc, #160]	; (8000b64 <HAL_ADC_MspInit+0xbc>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d122      	bne.n	8000b0e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ac8:	4b27      	ldr	r3, [pc, #156]	; (8000b68 <HAL_ADC_MspInit+0xc0>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	4a26      	ldr	r2, [pc, #152]	; (8000b68 <HAL_ADC_MspInit+0xc0>)
 8000ace:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ad2:	6193      	str	r3, [r2, #24]
 8000ad4:	4b24      	ldr	r3, [pc, #144]	; (8000b68 <HAL_ADC_MspInit+0xc0>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000adc:	617b      	str	r3, [r7, #20]
 8000ade:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae0:	4b21      	ldr	r3, [pc, #132]	; (8000b68 <HAL_ADC_MspInit+0xc0>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a20      	ldr	r2, [pc, #128]	; (8000b68 <HAL_ADC_MspInit+0xc0>)
 8000ae6:	f043 0308 	orr.w	r3, r3, #8
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b1e      	ldr	r3, [pc, #120]	; (8000b68 <HAL_ADC_MspInit+0xc0>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f003 0308 	and.w	r3, r3, #8
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000af8:	2301      	movs	r3, #1
 8000afa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000afc:	2303      	movs	r3, #3
 8000afe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b00:	f107 0318 	add.w	r3, r7, #24
 8000b04:	4619      	mov	r1, r3
 8000b06:	4819      	ldr	r0, [pc, #100]	; (8000b6c <HAL_ADC_MspInit+0xc4>)
 8000b08:	f000 ff4e 	bl	80019a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000b0c:	e026      	b.n	8000b5c <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a17      	ldr	r2, [pc, #92]	; (8000b70 <HAL_ADC_MspInit+0xc8>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d121      	bne.n	8000b5c <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <HAL_ADC_MspInit+0xc0>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a12      	ldr	r2, [pc, #72]	; (8000b68 <HAL_ADC_MspInit+0xc0>)
 8000b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <HAL_ADC_MspInit+0xc0>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b30:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <HAL_ADC_MspInit+0xc0>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	4a0c      	ldr	r2, [pc, #48]	; (8000b68 <HAL_ADC_MspInit+0xc0>)
 8000b36:	f043 0304 	orr.w	r3, r3, #4
 8000b3a:	6193      	str	r3, [r2, #24]
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <HAL_ADC_MspInit+0xc0>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	f003 0304 	and.w	r3, r3, #4
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000b48:	2306      	movs	r3, #6
 8000b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b50:	f107 0318 	add.w	r3, r7, #24
 8000b54:	4619      	mov	r1, r3
 8000b56:	4807      	ldr	r0, [pc, #28]	; (8000b74 <HAL_ADC_MspInit+0xcc>)
 8000b58:	f000 ff26 	bl	80019a8 <HAL_GPIO_Init>
}
 8000b5c:	bf00      	nop
 8000b5e:	3728      	adds	r7, #40	; 0x28
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40012400 	.word	0x40012400
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	40010c00 	.word	0x40010c00
 8000b70:	40012800 	.word	0x40012800
 8000b74:	40010800 	.word	0x40010800

08000b78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b088      	sub	sp, #32
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0310 	add.w	r3, r7, #16
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a1b      	ldr	r2, [pc, #108]	; (8000c00 <HAL_SPI_MspInit+0x88>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d12f      	bne.n	8000bf8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b98:	4b1a      	ldr	r3, [pc, #104]	; (8000c04 <HAL_SPI_MspInit+0x8c>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	4a19      	ldr	r2, [pc, #100]	; (8000c04 <HAL_SPI_MspInit+0x8c>)
 8000b9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ba2:	6193      	str	r3, [r2, #24]
 8000ba4:	4b17      	ldr	r3, [pc, #92]	; (8000c04 <HAL_SPI_MspInit+0x8c>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb0:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <HAL_SPI_MspInit+0x8c>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	4a13      	ldr	r2, [pc, #76]	; (8000c04 <HAL_SPI_MspInit+0x8c>)
 8000bb6:	f043 0304 	orr.w	r3, r3, #4
 8000bba:	6193      	str	r3, [r2, #24]
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <HAL_SPI_MspInit+0x8c>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	f003 0304 	and.w	r3, r3, #4
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000bc8:	23a0      	movs	r3, #160	; 0xa0
 8000bca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd4:	f107 0310 	add.w	r3, r7, #16
 8000bd8:	4619      	mov	r1, r3
 8000bda:	480b      	ldr	r0, [pc, #44]	; (8000c08 <HAL_SPI_MspInit+0x90>)
 8000bdc:	f000 fee4 	bl	80019a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000be0:	2340      	movs	r3, #64	; 0x40
 8000be2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bec:	f107 0310 	add.w	r3, r7, #16
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4805      	ldr	r0, [pc, #20]	; (8000c08 <HAL_SPI_MspInit+0x90>)
 8000bf4:	f000 fed8 	bl	80019a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bf8:	bf00      	nop
 8000bfa:	3720      	adds	r7, #32
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40013000 	.word	0x40013000
 8000c04:	40021000 	.word	0x40021000
 8000c08:	40010800 	.word	0x40010800

08000c0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b088      	sub	sp, #32
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 0310 	add.w	r3, r7, #16
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a1c      	ldr	r2, [pc, #112]	; (8000c98 <HAL_UART_MspInit+0x8c>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d131      	bne.n	8000c90 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c2c:	4b1b      	ldr	r3, [pc, #108]	; (8000c9c <HAL_UART_MspInit+0x90>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	4a1a      	ldr	r2, [pc, #104]	; (8000c9c <HAL_UART_MspInit+0x90>)
 8000c32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c36:	6193      	str	r3, [r2, #24]
 8000c38:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <HAL_UART_MspInit+0x90>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c44:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <HAL_UART_MspInit+0x90>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	4a14      	ldr	r2, [pc, #80]	; (8000c9c <HAL_UART_MspInit+0x90>)
 8000c4a:	f043 0304 	orr.w	r3, r3, #4
 8000c4e:	6193      	str	r3, [r2, #24]
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <HAL_UART_MspInit+0x90>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f003 0304 	and.w	r3, r3, #4
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c66:	2303      	movs	r3, #3
 8000c68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6a:	f107 0310 	add.w	r3, r7, #16
 8000c6e:	4619      	mov	r1, r3
 8000c70:	480b      	ldr	r0, [pc, #44]	; (8000ca0 <HAL_UART_MspInit+0x94>)
 8000c72:	f000 fe99 	bl	80019a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c84:	f107 0310 	add.w	r3, r7, #16
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <HAL_UART_MspInit+0x94>)
 8000c8c:	f000 fe8c 	bl	80019a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c90:	bf00      	nop
 8000c92:	3720      	adds	r7, #32
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40013800 	.word	0x40013800
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40010800 	.word	0x40010800

08000ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <NMI_Handler+0x4>

08000caa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cae:	e7fe      	b.n	8000cae <HardFault_Handler+0x4>

08000cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <MemManage_Handler+0x4>

08000cb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cba:	e7fe      	b.n	8000cba <BusFault_Handler+0x4>

08000cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <UsageFault_Handler+0x4>

08000cc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bc80      	pop	{r7}
 8000ccc:	4770      	bx	lr

08000cce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr

08000cda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr

08000ce6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cea:	f000 f8b7 	bl	8000e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_1_Pin);
 8000cf6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000cfa:	f000 fff1 	bl	8001ce0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_2_Pin);
 8000cfe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000d02:	f000 ffed 	bl	8001ce0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d14:	4a14      	ldr	r2, [pc, #80]	; (8000d68 <_sbrk+0x5c>)
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <_sbrk+0x60>)
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d20:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <_sbrk+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d102      	bne.n	8000d2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d28:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <_sbrk+0x64>)
 8000d2a:	4a12      	ldr	r2, [pc, #72]	; (8000d74 <_sbrk+0x68>)
 8000d2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d2e:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <_sbrk+0x64>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d207      	bcs.n	8000d4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d3c:	f002 fbc0 	bl	80034c0 <__errno>
 8000d40:	4603      	mov	r3, r0
 8000d42:	220c      	movs	r2, #12
 8000d44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d46:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4a:	e009      	b.n	8000d60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <_sbrk+0x64>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d52:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <_sbrk+0x64>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	4a05      	ldr	r2, [pc, #20]	; (8000d70 <_sbrk+0x64>)
 8000d5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20005000 	.word	0x20005000
 8000d6c:	00000400 	.word	0x00000400
 8000d70:	200001c4 	.word	0x200001c4
 8000d74:	200001e0 	.word	0x200001e0

08000d78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr

08000d84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d84:	480c      	ldr	r0, [pc, #48]	; (8000db8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d86:	490d      	ldr	r1, [pc, #52]	; (8000dbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d88:	4a0d      	ldr	r2, [pc, #52]	; (8000dc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d8c:	e002      	b.n	8000d94 <LoopCopyDataInit>

08000d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d92:	3304      	adds	r3, #4

08000d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d98:	d3f9      	bcc.n	8000d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d9c:	4c0a      	ldr	r4, [pc, #40]	; (8000dc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da0:	e001      	b.n	8000da6 <LoopFillZerobss>

08000da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da4:	3204      	adds	r2, #4

08000da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da8:	d3fb      	bcc.n	8000da2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000daa:	f7ff ffe5 	bl	8000d78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dae:	f002 fb8d 	bl	80034cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000db2:	f7ff fc1b 	bl	80005ec <main>
  bx lr
 8000db6:	4770      	bx	lr
  ldr r0, =_sdata
 8000db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dbc:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8000dc0:	08003ec0 	.word	0x08003ec0
  ldr r2, =_sbss
 8000dc4:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8000dc8:	200001dc 	.word	0x200001dc

08000dcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dcc:	e7fe      	b.n	8000dcc <ADC1_2_IRQHandler>
	...

08000dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <HAL_Init+0x28>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <HAL_Init+0x28>)
 8000dda:	f043 0310 	orr.w	r3, r3, #16
 8000dde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de0:	2003      	movs	r0, #3
 8000de2:	f000 fd9f 	bl	8001924 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de6:	200f      	movs	r0, #15
 8000de8:	f000 f808 	bl	8000dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dec:	f7ff fe2a 	bl	8000a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40022000 	.word	0x40022000

08000dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <HAL_InitTick+0x54>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <HAL_InitTick+0x58>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 fdb7 	bl	800198e <HAL_SYSTICK_Config>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e00e      	b.n	8000e48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b0f      	cmp	r3, #15
 8000e2e:	d80a      	bhi.n	8000e46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e30:	2200      	movs	r2, #0
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295
 8000e38:	f000 fd7f 	bl	800193a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e3c:	4a06      	ldr	r2, [pc, #24]	; (8000e58 <HAL_InitTick+0x5c>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	e000      	b.n	8000e48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000028 	.word	0x20000028
 8000e54:	20000030 	.word	0x20000030
 8000e58:	2000002c 	.word	0x2000002c

08000e5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <HAL_IncTick+0x1c>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <HAL_IncTick+0x20>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	4a03      	ldr	r2, [pc, #12]	; (8000e7c <HAL_IncTick+0x20>)
 8000e6e:	6013      	str	r3, [r2, #0]
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr
 8000e78:	20000030 	.word	0x20000030
 8000e7c:	200001c8 	.word	0x200001c8

08000e80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return uwTick;
 8000e84:	4b02      	ldr	r3, [pc, #8]	; (8000e90 <HAL_GetTick+0x10>)
 8000e86:	681b      	ldr	r3, [r3, #0]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	200001c8 	.word	0x200001c8

08000e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e9c:	f7ff fff0 	bl	8000e80 <HAL_GetTick>
 8000ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eac:	d005      	beq.n	8000eba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <HAL_Delay+0x44>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eba:	bf00      	nop
 8000ebc:	f7ff ffe0 	bl	8000e80 <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d8f7      	bhi.n	8000ebc <HAL_Delay+0x28>
  {
  }
}
 8000ecc:	bf00      	nop
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000030 	.word	0x20000030

08000edc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000eec:	2300      	movs	r3, #0
 8000eee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d101      	bne.n	8000efe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e0be      	b.n	800107c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d109      	bne.n	8000f20 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff fdc4 	bl	8000aa8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f000 fbf1 	bl	8001708 <ADC_ConversionStop_Disable>
 8000f26:	4603      	mov	r3, r0
 8000f28:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2e:	f003 0310 	and.w	r3, r3, #16
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f040 8099 	bne.w	800106a <HAL_ADC_Init+0x18e>
 8000f38:	7dfb      	ldrb	r3, [r7, #23]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f040 8095 	bne.w	800106a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f44:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f48:	f023 0302 	bic.w	r3, r3, #2
 8000f4c:	f043 0202 	orr.w	r2, r3, #2
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f5c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	7b1b      	ldrb	r3, [r3, #12]
 8000f62:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f64:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f74:	d003      	beq.n	8000f7e <HAL_ADC_Init+0xa2>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d102      	bne.n	8000f84 <HAL_ADC_Init+0xa8>
 8000f7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f82:	e000      	b.n	8000f86 <HAL_ADC_Init+0xaa>
 8000f84:	2300      	movs	r3, #0
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	7d1b      	ldrb	r3, [r3, #20]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d119      	bne.n	8000fc8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	7b1b      	ldrb	r3, [r3, #12]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d109      	bne.n	8000fb0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	3b01      	subs	r3, #1
 8000fa2:	035a      	lsls	r2, r3, #13
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	e00b      	b.n	8000fc8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb4:	f043 0220 	orr.w	r2, r3, #32
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc0:	f043 0201 	orr.w	r2, r3, #1
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	4b28      	ldr	r3, [pc, #160]	; (8001084 <HAL_ADC_Init+0x1a8>)
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	6812      	ldr	r2, [r2, #0]
 8000fea:	68b9      	ldr	r1, [r7, #8]
 8000fec:	430b      	orrs	r3, r1
 8000fee:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ff8:	d003      	beq.n	8001002 <HAL_ADC_Init+0x126>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d104      	bne.n	800100c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	691b      	ldr	r3, [r3, #16]
 8001006:	3b01      	subs	r3, #1
 8001008:	051b      	lsls	r3, r3, #20
 800100a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001012:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	430a      	orrs	r2, r1
 800101e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	689a      	ldr	r2, [r3, #8]
 8001026:	4b18      	ldr	r3, [pc, #96]	; (8001088 <HAL_ADC_Init+0x1ac>)
 8001028:	4013      	ands	r3, r2
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	429a      	cmp	r2, r3
 800102e:	d10b      	bne.n	8001048 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103a:	f023 0303 	bic.w	r3, r3, #3
 800103e:	f043 0201 	orr.w	r2, r3, #1
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001046:	e018      	b.n	800107a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800104c:	f023 0312 	bic.w	r3, r3, #18
 8001050:	f043 0210 	orr.w	r2, r3, #16
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105c:	f043 0201 	orr.w	r2, r3, #1
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001068:	e007      	b.n	800107a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800106e:	f043 0210 	orr.w	r2, r3, #16
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800107a:	7dfb      	ldrb	r3, [r7, #23]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	ffe1f7fd 	.word	0xffe1f7fd
 8001088:	ff1f0efe 	.word	0xff1f0efe

0800108c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001094:	2300      	movs	r3, #0
 8001096:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d101      	bne.n	80010a6 <HAL_ADC_Start+0x1a>
 80010a2:	2302      	movs	r3, #2
 80010a4:	e098      	b.n	80011d8 <HAL_ADC_Start+0x14c>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2201      	movs	r2, #1
 80010aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f000 fad0 	bl	8001654 <ADC_Enable>
 80010b4:	4603      	mov	r3, r0
 80010b6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f040 8087 	bne.w	80011ce <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010c8:	f023 0301 	bic.w	r3, r3, #1
 80010cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a41      	ldr	r2, [pc, #260]	; (80011e0 <HAL_ADC_Start+0x154>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d105      	bne.n	80010ea <HAL_ADC_Start+0x5e>
 80010de:	4b41      	ldr	r3, [pc, #260]	; (80011e4 <HAL_ADC_Start+0x158>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d115      	bne.n	8001116 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001100:	2b00      	cmp	r3, #0
 8001102:	d026      	beq.n	8001152 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001108:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800110c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001114:	e01d      	b.n	8001152 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800111a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a2f      	ldr	r2, [pc, #188]	; (80011e4 <HAL_ADC_Start+0x158>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d004      	beq.n	8001136 <HAL_ADC_Start+0xaa>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a2b      	ldr	r2, [pc, #172]	; (80011e0 <HAL_ADC_Start+0x154>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d10d      	bne.n	8001152 <HAL_ADC_Start+0xc6>
 8001136:	4b2b      	ldr	r3, [pc, #172]	; (80011e4 <HAL_ADC_Start+0x158>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800113e:	2b00      	cmp	r3, #0
 8001140:	d007      	beq.n	8001152 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001146:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800114a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001156:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d006      	beq.n	800116c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001162:	f023 0206 	bic.w	r2, r3, #6
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	62da      	str	r2, [r3, #44]	; 0x2c
 800116a:	e002      	b.n	8001172 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f06f 0202 	mvn.w	r2, #2
 8001182:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800118e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001192:	d113      	bne.n	80011bc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001198:	4a11      	ldr	r2, [pc, #68]	; (80011e0 <HAL_ADC_Start+0x154>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d105      	bne.n	80011aa <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <HAL_ADC_Start+0x158>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d108      	bne.n	80011bc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	e00c      	b.n	80011d6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	689a      	ldr	r2, [r3, #8]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	e003      	b.n	80011d6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40012800 	.word	0x40012800
 80011e4:	40012400 	.word	0x40012400

080011e8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011f0:	2300      	movs	r3, #0
 80011f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d101      	bne.n	8001202 <HAL_ADC_Stop+0x1a>
 80011fe:	2302      	movs	r3, #2
 8001200:	e01a      	b.n	8001238 <HAL_ADC_Stop+0x50>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2201      	movs	r2, #1
 8001206:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 fa7c 	bl	8001708 <ADC_ConversionStop_Disable>
 8001210:	4603      	mov	r3, r0
 8001212:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d109      	bne.n	800122e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001222:	f023 0301 	bic.w	r3, r3, #1
 8001226:	f043 0201 	orr.w	r2, r3, #1
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001236:	7bfb      	ldrb	r3, [r7, #15]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b087      	sub	sp, #28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001256:	f7ff fe13 	bl	8000e80 <HAL_GetTick>
 800125a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00b      	beq.n	8001282 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126e:	f043 0220 	orr.w	r2, r3, #32
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e0d3      	b.n	800142a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800128c:	2b00      	cmp	r3, #0
 800128e:	d131      	bne.n	80012f4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001296:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800129a:	2b00      	cmp	r3, #0
 800129c:	d12a      	bne.n	80012f4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800129e:	e021      	b.n	80012e4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a6:	d01d      	beq.n	80012e4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d007      	beq.n	80012be <HAL_ADC_PollForConversion+0x7e>
 80012ae:	f7ff fde7 	bl	8000e80 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	683a      	ldr	r2, [r7, #0]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d212      	bcs.n	80012e4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d10b      	bne.n	80012e4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d0:	f043 0204 	orr.w	r2, r3, #4
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e0a2      	b.n	800142a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d0d6      	beq.n	80012a0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80012f2:	e070      	b.n	80013d6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80012f4:	4b4f      	ldr	r3, [pc, #316]	; (8001434 <HAL_ADC_PollForConversion+0x1f4>)
 80012f6:	681c      	ldr	r4, [r3, #0]
 80012f8:	2002      	movs	r0, #2
 80012fa:	f001 f9d9 	bl	80026b0 <HAL_RCCEx_GetPeriphCLKFreq>
 80012fe:	4603      	mov	r3, r0
 8001300:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	6919      	ldr	r1, [r3, #16]
 800130a:	4b4b      	ldr	r3, [pc, #300]	; (8001438 <HAL_ADC_PollForConversion+0x1f8>)
 800130c:	400b      	ands	r3, r1
 800130e:	2b00      	cmp	r3, #0
 8001310:	d118      	bne.n	8001344 <HAL_ADC_PollForConversion+0x104>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	68d9      	ldr	r1, [r3, #12]
 8001318:	4b48      	ldr	r3, [pc, #288]	; (800143c <HAL_ADC_PollForConversion+0x1fc>)
 800131a:	400b      	ands	r3, r1
 800131c:	2b00      	cmp	r3, #0
 800131e:	d111      	bne.n	8001344 <HAL_ADC_PollForConversion+0x104>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6919      	ldr	r1, [r3, #16]
 8001326:	4b46      	ldr	r3, [pc, #280]	; (8001440 <HAL_ADC_PollForConversion+0x200>)
 8001328:	400b      	ands	r3, r1
 800132a:	2b00      	cmp	r3, #0
 800132c:	d108      	bne.n	8001340 <HAL_ADC_PollForConversion+0x100>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	68d9      	ldr	r1, [r3, #12]
 8001334:	4b43      	ldr	r3, [pc, #268]	; (8001444 <HAL_ADC_PollForConversion+0x204>)
 8001336:	400b      	ands	r3, r1
 8001338:	2b00      	cmp	r3, #0
 800133a:	d101      	bne.n	8001340 <HAL_ADC_PollForConversion+0x100>
 800133c:	2314      	movs	r3, #20
 800133e:	e020      	b.n	8001382 <HAL_ADC_PollForConversion+0x142>
 8001340:	2329      	movs	r3, #41	; 0x29
 8001342:	e01e      	b.n	8001382 <HAL_ADC_PollForConversion+0x142>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6919      	ldr	r1, [r3, #16]
 800134a:	4b3d      	ldr	r3, [pc, #244]	; (8001440 <HAL_ADC_PollForConversion+0x200>)
 800134c:	400b      	ands	r3, r1
 800134e:	2b00      	cmp	r3, #0
 8001350:	d106      	bne.n	8001360 <HAL_ADC_PollForConversion+0x120>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	68d9      	ldr	r1, [r3, #12]
 8001358:	4b3a      	ldr	r3, [pc, #232]	; (8001444 <HAL_ADC_PollForConversion+0x204>)
 800135a:	400b      	ands	r3, r1
 800135c:	2b00      	cmp	r3, #0
 800135e:	d00d      	beq.n	800137c <HAL_ADC_PollForConversion+0x13c>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6919      	ldr	r1, [r3, #16]
 8001366:	4b38      	ldr	r3, [pc, #224]	; (8001448 <HAL_ADC_PollForConversion+0x208>)
 8001368:	400b      	ands	r3, r1
 800136a:	2b00      	cmp	r3, #0
 800136c:	d108      	bne.n	8001380 <HAL_ADC_PollForConversion+0x140>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	68d9      	ldr	r1, [r3, #12]
 8001374:	4b34      	ldr	r3, [pc, #208]	; (8001448 <HAL_ADC_PollForConversion+0x208>)
 8001376:	400b      	ands	r3, r1
 8001378:	2b00      	cmp	r3, #0
 800137a:	d101      	bne.n	8001380 <HAL_ADC_PollForConversion+0x140>
 800137c:	2354      	movs	r3, #84	; 0x54
 800137e:	e000      	b.n	8001382 <HAL_ADC_PollForConversion+0x142>
 8001380:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001382:	fb02 f303 	mul.w	r3, r2, r3
 8001386:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001388:	e021      	b.n	80013ce <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001390:	d01a      	beq.n	80013c8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d007      	beq.n	80013a8 <HAL_ADC_PollForConversion+0x168>
 8001398:	f7ff fd72 	bl	8000e80 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	683a      	ldr	r2, [r7, #0]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d20f      	bcs.n	80013c8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d90b      	bls.n	80013c8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b4:	f043 0204 	orr.w	r2, r3, #4
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e030      	b.n	800142a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	3301      	adds	r3, #1
 80013cc:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d8d9      	bhi.n	800138a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f06f 0212 	mvn.w	r2, #18
 80013de:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80013f6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80013fa:	d115      	bne.n	8001428 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001400:	2b00      	cmp	r3, #0
 8001402:	d111      	bne.n	8001428 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001408:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001414:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d105      	bne.n	8001428 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001420:	f043 0201 	orr.w	r2, r3, #1
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	371c      	adds	r7, #28
 800142e:	46bd      	mov	sp, r7
 8001430:	bd90      	pop	{r4, r7, pc}
 8001432:	bf00      	nop
 8001434:	20000028 	.word	0x20000028
 8001438:	24924924 	.word	0x24924924
 800143c:	00924924 	.word	0x00924924
 8001440:	12492492 	.word	0x12492492
 8001444:	00492492 	.word	0x00492492
 8001448:	00249249 	.word	0x00249249

0800144c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800145a:	4618      	mov	r0, r3
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800146e:	2300      	movs	r3, #0
 8001470:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800147c:	2b01      	cmp	r3, #1
 800147e:	d101      	bne.n	8001484 <HAL_ADC_ConfigChannel+0x20>
 8001480:	2302      	movs	r3, #2
 8001482:	e0dc      	b.n	800163e <HAL_ADC_ConfigChannel+0x1da>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b06      	cmp	r3, #6
 8001492:	d81c      	bhi.n	80014ce <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	3b05      	subs	r3, #5
 80014a6:	221f      	movs	r2, #31
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	4019      	ands	r1, r3
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	6818      	ldr	r0, [r3, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	4613      	mov	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	3b05      	subs	r3, #5
 80014c0:	fa00 f203 	lsl.w	r2, r0, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	430a      	orrs	r2, r1
 80014ca:	635a      	str	r2, [r3, #52]	; 0x34
 80014cc:	e03c      	b.n	8001548 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b0c      	cmp	r3, #12
 80014d4:	d81c      	bhi.n	8001510 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	3b23      	subs	r3, #35	; 0x23
 80014e8:	221f      	movs	r2, #31
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	4019      	ands	r1, r3
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	6818      	ldr	r0, [r3, #0]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	4613      	mov	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	3b23      	subs	r3, #35	; 0x23
 8001502:	fa00 f203 	lsl.w	r2, r0, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	430a      	orrs	r2, r1
 800150c:	631a      	str	r2, [r3, #48]	; 0x30
 800150e:	e01b      	b.n	8001548 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	4613      	mov	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	3b41      	subs	r3, #65	; 0x41
 8001522:	221f      	movs	r2, #31
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	4019      	ands	r1, r3
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	6818      	ldr	r0, [r3, #0]
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	4613      	mov	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	3b41      	subs	r3, #65	; 0x41
 800153c:	fa00 f203 	lsl.w	r2, r0, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	430a      	orrs	r2, r1
 8001546:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b09      	cmp	r3, #9
 800154e:	d91c      	bls.n	800158a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68d9      	ldr	r1, [r3, #12]
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	4613      	mov	r3, r2
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	4413      	add	r3, r2
 8001560:	3b1e      	subs	r3, #30
 8001562:	2207      	movs	r2, #7
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	4019      	ands	r1, r3
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	6898      	ldr	r0, [r3, #8]
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4613      	mov	r3, r2
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	4413      	add	r3, r2
 800157a:	3b1e      	subs	r3, #30
 800157c:	fa00 f203 	lsl.w	r2, r0, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	60da      	str	r2, [r3, #12]
 8001588:	e019      	b.n	80015be <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	6919      	ldr	r1, [r3, #16]
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4613      	mov	r3, r2
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	4413      	add	r3, r2
 800159a:	2207      	movs	r2, #7
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	4019      	ands	r1, r3
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	6898      	ldr	r0, [r3, #8]
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4613      	mov	r3, r2
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	4413      	add	r3, r2
 80015b2:	fa00 f203 	lsl.w	r2, r0, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2b10      	cmp	r3, #16
 80015c4:	d003      	beq.n	80015ce <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80015ca:	2b11      	cmp	r3, #17
 80015cc:	d132      	bne.n	8001634 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a1d      	ldr	r2, [pc, #116]	; (8001648 <HAL_ADC_ConfigChannel+0x1e4>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d125      	bne.n	8001624 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d126      	bne.n	8001634 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80015f4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b10      	cmp	r3, #16
 80015fc:	d11a      	bne.n	8001634 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015fe:	4b13      	ldr	r3, [pc, #76]	; (800164c <HAL_ADC_ConfigChannel+0x1e8>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a13      	ldr	r2, [pc, #76]	; (8001650 <HAL_ADC_ConfigChannel+0x1ec>)
 8001604:	fba2 2303 	umull	r2, r3, r2, r3
 8001608:	0c9a      	lsrs	r2, r3, #18
 800160a:	4613      	mov	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001614:	e002      	b.n	800161c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	3b01      	subs	r3, #1
 800161a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f9      	bne.n	8001616 <HAL_ADC_ConfigChannel+0x1b2>
 8001622:	e007      	b.n	8001634 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001628:	f043 0220 	orr.w	r2, r3, #32
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800163c:	7bfb      	ldrb	r3, [r7, #15]
}
 800163e:	4618      	mov	r0, r3
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	40012400 	.word	0x40012400
 800164c:	20000028 	.word	0x20000028
 8001650:	431bde83 	.word	0x431bde83

08001654 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800165c:	2300      	movs	r3, #0
 800165e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001660:	2300      	movs	r3, #0
 8001662:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b01      	cmp	r3, #1
 8001670:	d040      	beq.n	80016f4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f042 0201 	orr.w	r2, r2, #1
 8001680:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001682:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <ADC_Enable+0xac>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a1f      	ldr	r2, [pc, #124]	; (8001704 <ADC_Enable+0xb0>)
 8001688:	fba2 2303 	umull	r2, r3, r2, r3
 800168c:	0c9b      	lsrs	r3, r3, #18
 800168e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001690:	e002      	b.n	8001698 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	3b01      	subs	r3, #1
 8001696:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f9      	bne.n	8001692 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800169e:	f7ff fbef 	bl	8000e80 <HAL_GetTick>
 80016a2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80016a4:	e01f      	b.n	80016e6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80016a6:	f7ff fbeb 	bl	8000e80 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d918      	bls.n	80016e6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d011      	beq.n	80016e6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c6:	f043 0210 	orr.w	r2, r3, #16
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d2:	f043 0201 	orr.w	r2, r3, #1
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e007      	b.n	80016f6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d1d8      	bne.n	80016a6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000028 	.word	0x20000028
 8001704:	431bde83 	.word	0x431bde83

08001708 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b01      	cmp	r3, #1
 8001720:	d12e      	bne.n	8001780 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 0201 	bic.w	r2, r2, #1
 8001730:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001732:	f7ff fba5 	bl	8000e80 <HAL_GetTick>
 8001736:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001738:	e01b      	b.n	8001772 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800173a:	f7ff fba1 	bl	8000e80 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d914      	bls.n	8001772 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b01      	cmp	r3, #1
 8001754:	d10d      	bne.n	8001772 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175a:	f043 0210 	orr.w	r2, r3, #16
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001766:	f043 0201 	orr.w	r2, r3, #1
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e007      	b.n	8001782 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b01      	cmp	r3, #1
 800177e:	d0dc      	beq.n	800173a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a8:	4013      	ands	r3, r2
 80017aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017be:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	60d3      	str	r3, [r2, #12]
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <__NVIC_GetPriorityGrouping+0x18>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	0a1b      	lsrs	r3, r3, #8
 80017de:	f003 0307 	and.w	r3, r3, #7
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	db0b      	blt.n	800181a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	f003 021f 	and.w	r2, r3, #31
 8001808:	4906      	ldr	r1, [pc, #24]	; (8001824 <__NVIC_EnableIRQ+0x34>)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	095b      	lsrs	r3, r3, #5
 8001810:	2001      	movs	r0, #1
 8001812:	fa00 f202 	lsl.w	r2, r0, r2
 8001816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr
 8001824:	e000e100 	.word	0xe000e100

08001828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	6039      	str	r1, [r7, #0]
 8001832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001838:	2b00      	cmp	r3, #0
 800183a:	db0a      	blt.n	8001852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	b2da      	uxtb	r2, r3
 8001840:	490c      	ldr	r1, [pc, #48]	; (8001874 <__NVIC_SetPriority+0x4c>)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	0112      	lsls	r2, r2, #4
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	440b      	add	r3, r1
 800184c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001850:	e00a      	b.n	8001868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4908      	ldr	r1, [pc, #32]	; (8001878 <__NVIC_SetPriority+0x50>)
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	3b04      	subs	r3, #4
 8001860:	0112      	lsls	r2, r2, #4
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	440b      	add	r3, r1
 8001866:	761a      	strb	r2, [r3, #24]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	e000e100 	.word	0xe000e100
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800187c:	b480      	push	{r7}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f1c3 0307 	rsb	r3, r3, #7
 8001896:	2b04      	cmp	r3, #4
 8001898:	bf28      	it	cs
 800189a:	2304      	movcs	r3, #4
 800189c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3304      	adds	r3, #4
 80018a2:	2b06      	cmp	r3, #6
 80018a4:	d902      	bls.n	80018ac <NVIC_EncodePriority+0x30>
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3b03      	subs	r3, #3
 80018aa:	e000      	b.n	80018ae <NVIC_EncodePriority+0x32>
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	f04f 32ff 	mov.w	r2, #4294967295
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43da      	mvns	r2, r3
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	401a      	ands	r2, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c4:	f04f 31ff 	mov.w	r1, #4294967295
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	43d9      	mvns	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	4313      	orrs	r3, r2
         );
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3724      	adds	r7, #36	; 0x24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr

080018e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f0:	d301      	bcc.n	80018f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f2:	2301      	movs	r3, #1
 80018f4:	e00f      	b.n	8001916 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <SysTick_Config+0x40>)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018fe:	210f      	movs	r1, #15
 8001900:	f04f 30ff 	mov.w	r0, #4294967295
 8001904:	f7ff ff90 	bl	8001828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <SysTick_Config+0x40>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800190e:	4b04      	ldr	r3, [pc, #16]	; (8001920 <SysTick_Config+0x40>)
 8001910:	2207      	movs	r2, #7
 8001912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	e000e010 	.word	0xe000e010

08001924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff ff2d 	bl	800178c <__NVIC_SetPriorityGrouping>
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800193a:	b580      	push	{r7, lr}
 800193c:	b086      	sub	sp, #24
 800193e:	af00      	add	r7, sp, #0
 8001940:	4603      	mov	r3, r0
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	607a      	str	r2, [r7, #4]
 8001946:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800194c:	f7ff ff42 	bl	80017d4 <__NVIC_GetPriorityGrouping>
 8001950:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	68b9      	ldr	r1, [r7, #8]
 8001956:	6978      	ldr	r0, [r7, #20]
 8001958:	f7ff ff90 	bl	800187c <NVIC_EncodePriority>
 800195c:	4602      	mov	r2, r0
 800195e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff5f 	bl	8001828 <__NVIC_SetPriority>
}
 800196a:	bf00      	nop
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	4603      	mov	r3, r0
 800197a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800197c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff35 	bl	80017f0 <__NVIC_EnableIRQ>
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff ffa2 	bl	80018e0 <SysTick_Config>
 800199c:	4603      	mov	r3, r0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b08b      	sub	sp, #44	; 0x2c
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019b2:	2300      	movs	r3, #0
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019b6:	2300      	movs	r3, #0
 80019b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ba:	e169      	b.n	8001c90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019bc:	2201      	movs	r2, #1
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	69fa      	ldr	r2, [r7, #28]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	f040 8158 	bne.w	8001c8a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	4a9a      	ldr	r2, [pc, #616]	; (8001c48 <HAL_GPIO_Init+0x2a0>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d05e      	beq.n	8001aa2 <HAL_GPIO_Init+0xfa>
 80019e4:	4a98      	ldr	r2, [pc, #608]	; (8001c48 <HAL_GPIO_Init+0x2a0>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d875      	bhi.n	8001ad6 <HAL_GPIO_Init+0x12e>
 80019ea:	4a98      	ldr	r2, [pc, #608]	; (8001c4c <HAL_GPIO_Init+0x2a4>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d058      	beq.n	8001aa2 <HAL_GPIO_Init+0xfa>
 80019f0:	4a96      	ldr	r2, [pc, #600]	; (8001c4c <HAL_GPIO_Init+0x2a4>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d86f      	bhi.n	8001ad6 <HAL_GPIO_Init+0x12e>
 80019f6:	4a96      	ldr	r2, [pc, #600]	; (8001c50 <HAL_GPIO_Init+0x2a8>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d052      	beq.n	8001aa2 <HAL_GPIO_Init+0xfa>
 80019fc:	4a94      	ldr	r2, [pc, #592]	; (8001c50 <HAL_GPIO_Init+0x2a8>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d869      	bhi.n	8001ad6 <HAL_GPIO_Init+0x12e>
 8001a02:	4a94      	ldr	r2, [pc, #592]	; (8001c54 <HAL_GPIO_Init+0x2ac>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d04c      	beq.n	8001aa2 <HAL_GPIO_Init+0xfa>
 8001a08:	4a92      	ldr	r2, [pc, #584]	; (8001c54 <HAL_GPIO_Init+0x2ac>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d863      	bhi.n	8001ad6 <HAL_GPIO_Init+0x12e>
 8001a0e:	4a92      	ldr	r2, [pc, #584]	; (8001c58 <HAL_GPIO_Init+0x2b0>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d046      	beq.n	8001aa2 <HAL_GPIO_Init+0xfa>
 8001a14:	4a90      	ldr	r2, [pc, #576]	; (8001c58 <HAL_GPIO_Init+0x2b0>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d85d      	bhi.n	8001ad6 <HAL_GPIO_Init+0x12e>
 8001a1a:	2b12      	cmp	r3, #18
 8001a1c:	d82a      	bhi.n	8001a74 <HAL_GPIO_Init+0xcc>
 8001a1e:	2b12      	cmp	r3, #18
 8001a20:	d859      	bhi.n	8001ad6 <HAL_GPIO_Init+0x12e>
 8001a22:	a201      	add	r2, pc, #4	; (adr r2, 8001a28 <HAL_GPIO_Init+0x80>)
 8001a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a28:	08001aa3 	.word	0x08001aa3
 8001a2c:	08001a7d 	.word	0x08001a7d
 8001a30:	08001a8f 	.word	0x08001a8f
 8001a34:	08001ad1 	.word	0x08001ad1
 8001a38:	08001ad7 	.word	0x08001ad7
 8001a3c:	08001ad7 	.word	0x08001ad7
 8001a40:	08001ad7 	.word	0x08001ad7
 8001a44:	08001ad7 	.word	0x08001ad7
 8001a48:	08001ad7 	.word	0x08001ad7
 8001a4c:	08001ad7 	.word	0x08001ad7
 8001a50:	08001ad7 	.word	0x08001ad7
 8001a54:	08001ad7 	.word	0x08001ad7
 8001a58:	08001ad7 	.word	0x08001ad7
 8001a5c:	08001ad7 	.word	0x08001ad7
 8001a60:	08001ad7 	.word	0x08001ad7
 8001a64:	08001ad7 	.word	0x08001ad7
 8001a68:	08001ad7 	.word	0x08001ad7
 8001a6c:	08001a85 	.word	0x08001a85
 8001a70:	08001a99 	.word	0x08001a99
 8001a74:	4a79      	ldr	r2, [pc, #484]	; (8001c5c <HAL_GPIO_Init+0x2b4>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d013      	beq.n	8001aa2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a7a:	e02c      	b.n	8001ad6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	623b      	str	r3, [r7, #32]
          break;
 8001a82:	e029      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	3304      	adds	r3, #4
 8001a8a:	623b      	str	r3, [r7, #32]
          break;
 8001a8c:	e024      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	3308      	adds	r3, #8
 8001a94:	623b      	str	r3, [r7, #32]
          break;
 8001a96:	e01f      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	330c      	adds	r3, #12
 8001a9e:	623b      	str	r3, [r7, #32]
          break;
 8001aa0:	e01a      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d102      	bne.n	8001ab0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001aaa:	2304      	movs	r3, #4
 8001aac:	623b      	str	r3, [r7, #32]
          break;
 8001aae:	e013      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d105      	bne.n	8001ac4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ab8:	2308      	movs	r3, #8
 8001aba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69fa      	ldr	r2, [r7, #28]
 8001ac0:	611a      	str	r2, [r3, #16]
          break;
 8001ac2:	e009      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ac4:	2308      	movs	r3, #8
 8001ac6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69fa      	ldr	r2, [r7, #28]
 8001acc:	615a      	str	r2, [r3, #20]
          break;
 8001ace:	e003      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	623b      	str	r3, [r7, #32]
          break;
 8001ad4:	e000      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          break;
 8001ad6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	2bff      	cmp	r3, #255	; 0xff
 8001adc:	d801      	bhi.n	8001ae2 <HAL_GPIO_Init+0x13a>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	e001      	b.n	8001ae6 <HAL_GPIO_Init+0x13e>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	2bff      	cmp	r3, #255	; 0xff
 8001aec:	d802      	bhi.n	8001af4 <HAL_GPIO_Init+0x14c>
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	e002      	b.n	8001afa <HAL_GPIO_Init+0x152>
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	3b08      	subs	r3, #8
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	210f      	movs	r1, #15
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	fa01 f303 	lsl.w	r3, r1, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	401a      	ands	r2, r3
 8001b0c:	6a39      	ldr	r1, [r7, #32]
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	fa01 f303 	lsl.w	r3, r1, r3
 8001b14:	431a      	orrs	r2, r3
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 80b1 	beq.w	8001c8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b28:	4b4d      	ldr	r3, [pc, #308]	; (8001c60 <HAL_GPIO_Init+0x2b8>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	4a4c      	ldr	r2, [pc, #304]	; (8001c60 <HAL_GPIO_Init+0x2b8>)
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	6193      	str	r3, [r2, #24]
 8001b34:	4b4a      	ldr	r3, [pc, #296]	; (8001c60 <HAL_GPIO_Init+0x2b8>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b40:	4a48      	ldr	r2, [pc, #288]	; (8001c64 <HAL_GPIO_Init+0x2bc>)
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	089b      	lsrs	r3, r3, #2
 8001b46:	3302      	adds	r3, #2
 8001b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b4c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	220f      	movs	r2, #15
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	4013      	ands	r3, r2
 8001b62:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a40      	ldr	r2, [pc, #256]	; (8001c68 <HAL_GPIO_Init+0x2c0>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d013      	beq.n	8001b94 <HAL_GPIO_Init+0x1ec>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a3f      	ldr	r2, [pc, #252]	; (8001c6c <HAL_GPIO_Init+0x2c4>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d00d      	beq.n	8001b90 <HAL_GPIO_Init+0x1e8>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a3e      	ldr	r2, [pc, #248]	; (8001c70 <HAL_GPIO_Init+0x2c8>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d007      	beq.n	8001b8c <HAL_GPIO_Init+0x1e4>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a3d      	ldr	r2, [pc, #244]	; (8001c74 <HAL_GPIO_Init+0x2cc>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d101      	bne.n	8001b88 <HAL_GPIO_Init+0x1e0>
 8001b84:	2303      	movs	r3, #3
 8001b86:	e006      	b.n	8001b96 <HAL_GPIO_Init+0x1ee>
 8001b88:	2304      	movs	r3, #4
 8001b8a:	e004      	b.n	8001b96 <HAL_GPIO_Init+0x1ee>
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	e002      	b.n	8001b96 <HAL_GPIO_Init+0x1ee>
 8001b90:	2301      	movs	r3, #1
 8001b92:	e000      	b.n	8001b96 <HAL_GPIO_Init+0x1ee>
 8001b94:	2300      	movs	r3, #0
 8001b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b98:	f002 0203 	and.w	r2, r2, #3
 8001b9c:	0092      	lsls	r2, r2, #2
 8001b9e:	4093      	lsls	r3, r2
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ba6:	492f      	ldr	r1, [pc, #188]	; (8001c64 <HAL_GPIO_Init+0x2bc>)
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	089b      	lsrs	r3, r3, #2
 8001bac:	3302      	adds	r3, #2
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d006      	beq.n	8001bce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bc0:	4b2d      	ldr	r3, [pc, #180]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	492c      	ldr	r1, [pc, #176]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	600b      	str	r3, [r1, #0]
 8001bcc:	e006      	b.n	8001bdc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bce:	4b2a      	ldr	r3, [pc, #168]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	4928      	ldr	r1, [pc, #160]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d006      	beq.n	8001bf6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001be8:	4b23      	ldr	r3, [pc, #140]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	4922      	ldr	r1, [pc, #136]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	604b      	str	r3, [r1, #4]
 8001bf4:	e006      	b.n	8001c04 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bf6:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	491e      	ldr	r1, [pc, #120]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c00:	4013      	ands	r3, r2
 8001c02:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d006      	beq.n	8001c1e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c10:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	4918      	ldr	r1, [pc, #96]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	608b      	str	r3, [r1, #8]
 8001c1c:	e006      	b.n	8001c2c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c1e:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	43db      	mvns	r3, r3
 8001c26:	4914      	ldr	r1, [pc, #80]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c28:	4013      	ands	r3, r2
 8001c2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d021      	beq.n	8001c7c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c38:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c3a:	68da      	ldr	r2, [r3, #12]
 8001c3c:	490e      	ldr	r1, [pc, #56]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	60cb      	str	r3, [r1, #12]
 8001c44:	e021      	b.n	8001c8a <HAL_GPIO_Init+0x2e2>
 8001c46:	bf00      	nop
 8001c48:	10320000 	.word	0x10320000
 8001c4c:	10310000 	.word	0x10310000
 8001c50:	10220000 	.word	0x10220000
 8001c54:	10210000 	.word	0x10210000
 8001c58:	10120000 	.word	0x10120000
 8001c5c:	10110000 	.word	0x10110000
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40010000 	.word	0x40010000
 8001c68:	40010800 	.word	0x40010800
 8001c6c:	40010c00 	.word	0x40010c00
 8001c70:	40011000 	.word	0x40011000
 8001c74:	40011400 	.word	0x40011400
 8001c78:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <HAL_GPIO_Init+0x304>)
 8001c7e:	68da      	ldr	r2, [r3, #12]
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	43db      	mvns	r3, r3
 8001c84:	4909      	ldr	r1, [pc, #36]	; (8001cac <HAL_GPIO_Init+0x304>)
 8001c86:	4013      	ands	r3, r2
 8001c88:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c96:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f47f ae8e 	bne.w	80019bc <HAL_GPIO_Init+0x14>
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	bf00      	nop
 8001ca4:	372c      	adds	r7, #44	; 0x2c
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr
 8001cac:	40010400 	.word	0x40010400

08001cb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	807b      	strh	r3, [r7, #2]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cc0:	787b      	ldrb	r3, [r7, #1]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cc6:	887a      	ldrh	r2, [r7, #2]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ccc:	e003      	b.n	8001cd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cce:	887b      	ldrh	r3, [r7, #2]
 8001cd0:	041a      	lsls	r2, r3, #16
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	611a      	str	r2, [r3, #16]
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001cea:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cec:	695a      	ldr	r2, [r3, #20]
 8001cee:	88fb      	ldrh	r3, [r7, #6]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d006      	beq.n	8001d04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cf6:	4a05      	ldr	r2, [pc, #20]	; (8001d0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cf8:	88fb      	ldrh	r3, [r7, #6]
 8001cfa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cfc:	88fb      	ldrh	r3, [r7, #6]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe fc48 	bl	8000594 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d04:	bf00      	nop
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40010400 	.word	0x40010400

08001d10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e272      	b.n	8002208 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 8087 	beq.w	8001e3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d30:	4b92      	ldr	r3, [pc, #584]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 030c 	and.w	r3, r3, #12
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	d00c      	beq.n	8001d56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d3c:	4b8f      	ldr	r3, [pc, #572]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 030c 	and.w	r3, r3, #12
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d112      	bne.n	8001d6e <HAL_RCC_OscConfig+0x5e>
 8001d48:	4b8c      	ldr	r3, [pc, #560]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d54:	d10b      	bne.n	8001d6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d56:	4b89      	ldr	r3, [pc, #548]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d06c      	beq.n	8001e3c <HAL_RCC_OscConfig+0x12c>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d168      	bne.n	8001e3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e24c      	b.n	8002208 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d76:	d106      	bne.n	8001d86 <HAL_RCC_OscConfig+0x76>
 8001d78:	4b80      	ldr	r3, [pc, #512]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a7f      	ldr	r2, [pc, #508]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d82:	6013      	str	r3, [r2, #0]
 8001d84:	e02e      	b.n	8001de4 <HAL_RCC_OscConfig+0xd4>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10c      	bne.n	8001da8 <HAL_RCC_OscConfig+0x98>
 8001d8e:	4b7b      	ldr	r3, [pc, #492]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a7a      	ldr	r2, [pc, #488]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001d94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	4b78      	ldr	r3, [pc, #480]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a77      	ldr	r2, [pc, #476]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001da0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	e01d      	b.n	8001de4 <HAL_RCC_OscConfig+0xd4>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001db0:	d10c      	bne.n	8001dcc <HAL_RCC_OscConfig+0xbc>
 8001db2:	4b72      	ldr	r3, [pc, #456]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a71      	ldr	r2, [pc, #452]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	4b6f      	ldr	r3, [pc, #444]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a6e      	ldr	r2, [pc, #440]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	e00b      	b.n	8001de4 <HAL_RCC_OscConfig+0xd4>
 8001dcc:	4b6b      	ldr	r3, [pc, #428]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a6a      	ldr	r2, [pc, #424]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dd6:	6013      	str	r3, [r2, #0]
 8001dd8:	4b68      	ldr	r3, [pc, #416]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a67      	ldr	r2, [pc, #412]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001de2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d013      	beq.n	8001e14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dec:	f7ff f848 	bl	8000e80 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df4:	f7ff f844 	bl	8000e80 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b64      	cmp	r3, #100	; 0x64
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e200      	b.n	8002208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e06:	4b5d      	ldr	r3, [pc, #372]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0f0      	beq.n	8001df4 <HAL_RCC_OscConfig+0xe4>
 8001e12:	e014      	b.n	8001e3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e14:	f7ff f834 	bl	8000e80 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e1c:	f7ff f830 	bl	8000e80 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b64      	cmp	r3, #100	; 0x64
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e1ec      	b.n	8002208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e2e:	4b53      	ldr	r3, [pc, #332]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f0      	bne.n	8001e1c <HAL_RCC_OscConfig+0x10c>
 8001e3a:	e000      	b.n	8001e3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d063      	beq.n	8001f12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e4a:	4b4c      	ldr	r3, [pc, #304]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00b      	beq.n	8001e6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e56:	4b49      	ldr	r3, [pc, #292]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f003 030c 	and.w	r3, r3, #12
 8001e5e:	2b08      	cmp	r3, #8
 8001e60:	d11c      	bne.n	8001e9c <HAL_RCC_OscConfig+0x18c>
 8001e62:	4b46      	ldr	r3, [pc, #280]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d116      	bne.n	8001e9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6e:	4b43      	ldr	r3, [pc, #268]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d005      	beq.n	8001e86 <HAL_RCC_OscConfig+0x176>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d001      	beq.n	8001e86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e1c0      	b.n	8002208 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e86:	4b3d      	ldr	r3, [pc, #244]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	4939      	ldr	r1, [pc, #228]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e9a:	e03a      	b.n	8001f12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d020      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ea4:	4b36      	ldr	r3, [pc, #216]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eaa:	f7fe ffe9 	bl	8000e80 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eb2:	f7fe ffe5 	bl	8000e80 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e1a1      	b.n	8002208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec4:	4b2d      	ldr	r3, [pc, #180]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0f0      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed0:	4b2a      	ldr	r3, [pc, #168]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	4927      	ldr	r1, [pc, #156]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	600b      	str	r3, [r1, #0]
 8001ee4:	e015      	b.n	8001f12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ee6:	4b26      	ldr	r3, [pc, #152]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eec:	f7fe ffc8 	bl	8000e80 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ef4:	f7fe ffc4 	bl	8000e80 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e180      	b.n	8002208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f06:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f0      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d03a      	beq.n	8001f94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d019      	beq.n	8001f5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f26:	4b17      	ldr	r3, [pc, #92]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f2c:	f7fe ffa8 	bl	8000e80 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f34:	f7fe ffa4 	bl	8000e80 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e160      	b.n	8002208 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f46:	4b0d      	ldr	r3, [pc, #52]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f0      	beq.n	8001f34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f52:	2001      	movs	r0, #1
 8001f54:	f000 fad8 	bl	8002508 <RCC_Delay>
 8001f58:	e01c      	b.n	8001f94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f60:	f7fe ff8e 	bl	8000e80 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f66:	e00f      	b.n	8001f88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f68:	f7fe ff8a 	bl	8000e80 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d908      	bls.n	8001f88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e146      	b.n	8002208 <HAL_RCC_OscConfig+0x4f8>
 8001f7a:	bf00      	nop
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	42420000 	.word	0x42420000
 8001f84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f88:	4b92      	ldr	r3, [pc, #584]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1e9      	bne.n	8001f68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 80a6 	beq.w	80020ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fa6:	4b8b      	ldr	r3, [pc, #556]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10d      	bne.n	8001fce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fb2:	4b88      	ldr	r3, [pc, #544]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	4a87      	ldr	r2, [pc, #540]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 8001fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fbc:	61d3      	str	r3, [r2, #28]
 8001fbe:	4b85      	ldr	r3, [pc, #532]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc6:	60bb      	str	r3, [r7, #8]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fce:	4b82      	ldr	r3, [pc, #520]	; (80021d8 <HAL_RCC_OscConfig+0x4c8>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d118      	bne.n	800200c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fda:	4b7f      	ldr	r3, [pc, #508]	; (80021d8 <HAL_RCC_OscConfig+0x4c8>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a7e      	ldr	r2, [pc, #504]	; (80021d8 <HAL_RCC_OscConfig+0x4c8>)
 8001fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fe6:	f7fe ff4b 	bl	8000e80 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fee:	f7fe ff47 	bl	8000e80 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b64      	cmp	r3, #100	; 0x64
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e103      	b.n	8002208 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002000:	4b75      	ldr	r3, [pc, #468]	; (80021d8 <HAL_RCC_OscConfig+0x4c8>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0f0      	beq.n	8001fee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d106      	bne.n	8002022 <HAL_RCC_OscConfig+0x312>
 8002014:	4b6f      	ldr	r3, [pc, #444]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	4a6e      	ldr	r2, [pc, #440]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6213      	str	r3, [r2, #32]
 8002020:	e02d      	b.n	800207e <HAL_RCC_OscConfig+0x36e>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10c      	bne.n	8002044 <HAL_RCC_OscConfig+0x334>
 800202a:	4b6a      	ldr	r3, [pc, #424]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	4a69      	ldr	r2, [pc, #420]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 8002030:	f023 0301 	bic.w	r3, r3, #1
 8002034:	6213      	str	r3, [r2, #32]
 8002036:	4b67      	ldr	r3, [pc, #412]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	4a66      	ldr	r2, [pc, #408]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 800203c:	f023 0304 	bic.w	r3, r3, #4
 8002040:	6213      	str	r3, [r2, #32]
 8002042:	e01c      	b.n	800207e <HAL_RCC_OscConfig+0x36e>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	2b05      	cmp	r3, #5
 800204a:	d10c      	bne.n	8002066 <HAL_RCC_OscConfig+0x356>
 800204c:	4b61      	ldr	r3, [pc, #388]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	4a60      	ldr	r2, [pc, #384]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 8002052:	f043 0304 	orr.w	r3, r3, #4
 8002056:	6213      	str	r3, [r2, #32]
 8002058:	4b5e      	ldr	r3, [pc, #376]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	4a5d      	ldr	r2, [pc, #372]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 800205e:	f043 0301 	orr.w	r3, r3, #1
 8002062:	6213      	str	r3, [r2, #32]
 8002064:	e00b      	b.n	800207e <HAL_RCC_OscConfig+0x36e>
 8002066:	4b5b      	ldr	r3, [pc, #364]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	4a5a      	ldr	r2, [pc, #360]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 800206c:	f023 0301 	bic.w	r3, r3, #1
 8002070:	6213      	str	r3, [r2, #32]
 8002072:	4b58      	ldr	r3, [pc, #352]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	4a57      	ldr	r2, [pc, #348]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 8002078:	f023 0304 	bic.w	r3, r3, #4
 800207c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d015      	beq.n	80020b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002086:	f7fe fefb 	bl	8000e80 <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800208c:	e00a      	b.n	80020a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208e:	f7fe fef7 	bl	8000e80 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	f241 3288 	movw	r2, #5000	; 0x1388
 800209c:	4293      	cmp	r3, r2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e0b1      	b.n	8002208 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a4:	4b4b      	ldr	r3, [pc, #300]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0ee      	beq.n	800208e <HAL_RCC_OscConfig+0x37e>
 80020b0:	e014      	b.n	80020dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b2:	f7fe fee5 	bl	8000e80 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b8:	e00a      	b.n	80020d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ba:	f7fe fee1 	bl	8000e80 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e09b      	b.n	8002208 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020d0:	4b40      	ldr	r3, [pc, #256]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1ee      	bne.n	80020ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020dc:	7dfb      	ldrb	r3, [r7, #23]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d105      	bne.n	80020ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e2:	4b3c      	ldr	r3, [pc, #240]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	4a3b      	ldr	r2, [pc, #236]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 80020e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 8087 	beq.w	8002206 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020f8:	4b36      	ldr	r3, [pc, #216]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 030c 	and.w	r3, r3, #12
 8002100:	2b08      	cmp	r3, #8
 8002102:	d061      	beq.n	80021c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	2b02      	cmp	r3, #2
 800210a:	d146      	bne.n	800219a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210c:	4b33      	ldr	r3, [pc, #204]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002112:	f7fe feb5 	bl	8000e80 <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211a:	f7fe feb1 	bl	8000e80 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e06d      	b.n	8002208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800212c:	4b29      	ldr	r3, [pc, #164]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1f0      	bne.n	800211a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002140:	d108      	bne.n	8002154 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002142:	4b24      	ldr	r3, [pc, #144]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	4921      	ldr	r1, [pc, #132]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 8002150:	4313      	orrs	r3, r2
 8002152:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002154:	4b1f      	ldr	r3, [pc, #124]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a19      	ldr	r1, [r3, #32]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	430b      	orrs	r3, r1
 8002166:	491b      	ldr	r1, [pc, #108]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 8002168:	4313      	orrs	r3, r2
 800216a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800216c:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 800216e:	2201      	movs	r2, #1
 8002170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002172:	f7fe fe85 	bl	8000e80 <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800217a:	f7fe fe81 	bl	8000e80 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e03d      	b.n	8002208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0f0      	beq.n	800217a <HAL_RCC_OscConfig+0x46a>
 8002198:	e035      	b.n	8002206 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800219a:	4b10      	ldr	r3, [pc, #64]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a0:	f7fe fe6e 	bl	8000e80 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a8:	f7fe fe6a 	bl	8000e80 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e026      	b.n	8002208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ba:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f0      	bne.n	80021a8 <HAL_RCC_OscConfig+0x498>
 80021c6:	e01e      	b.n	8002206 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d107      	bne.n	80021e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e019      	b.n	8002208 <HAL_RCC_OscConfig+0x4f8>
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40007000 	.word	0x40007000
 80021dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021e0:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <HAL_RCC_OscConfig+0x500>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d106      	bne.n	8002202 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021fe:	429a      	cmp	r2, r3
 8002200:	d001      	beq.n	8002206 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e000      	b.n	8002208 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40021000 	.word	0x40021000

08002214 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0d0      	b.n	80023ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002228:	4b6a      	ldr	r3, [pc, #424]	; (80023d4 <HAL_RCC_ClockConfig+0x1c0>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d910      	bls.n	8002258 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002236:	4b67      	ldr	r3, [pc, #412]	; (80023d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f023 0207 	bic.w	r2, r3, #7
 800223e:	4965      	ldr	r1, [pc, #404]	; (80023d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	4313      	orrs	r3, r2
 8002244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002246:	4b63      	ldr	r3, [pc, #396]	; (80023d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d001      	beq.n	8002258 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e0b8      	b.n	80023ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d020      	beq.n	80022a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b00      	cmp	r3, #0
 800226e:	d005      	beq.n	800227c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002270:	4b59      	ldr	r3, [pc, #356]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	4a58      	ldr	r2, [pc, #352]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002276:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800227a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0308 	and.w	r3, r3, #8
 8002284:	2b00      	cmp	r3, #0
 8002286:	d005      	beq.n	8002294 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002288:	4b53      	ldr	r3, [pc, #332]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	4a52      	ldr	r2, [pc, #328]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 800228e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002292:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002294:	4b50      	ldr	r3, [pc, #320]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	494d      	ldr	r1, [pc, #308]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d040      	beq.n	8002334 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d107      	bne.n	80022ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ba:	4b47      	ldr	r3, [pc, #284]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d115      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e07f      	b.n	80023ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d107      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d2:	4b41      	ldr	r3, [pc, #260]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d109      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e073      	b.n	80023ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e2:	4b3d      	ldr	r3, [pc, #244]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e06b      	b.n	80023ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022f2:	4b39      	ldr	r3, [pc, #228]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f023 0203 	bic.w	r2, r3, #3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	4936      	ldr	r1, [pc, #216]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002300:	4313      	orrs	r3, r2
 8002302:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002304:	f7fe fdbc 	bl	8000e80 <HAL_GetTick>
 8002308:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800230a:	e00a      	b.n	8002322 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800230c:	f7fe fdb8 	bl	8000e80 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	f241 3288 	movw	r2, #5000	; 0x1388
 800231a:	4293      	cmp	r3, r2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e053      	b.n	80023ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002322:	4b2d      	ldr	r3, [pc, #180]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f003 020c 	and.w	r2, r3, #12
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	429a      	cmp	r2, r3
 8002332:	d1eb      	bne.n	800230c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002334:	4b27      	ldr	r3, [pc, #156]	; (80023d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d210      	bcs.n	8002364 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002342:	4b24      	ldr	r3, [pc, #144]	; (80023d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f023 0207 	bic.w	r2, r3, #7
 800234a:	4922      	ldr	r1, [pc, #136]	; (80023d4 <HAL_RCC_ClockConfig+0x1c0>)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	4313      	orrs	r3, r2
 8002350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002352:	4b20      	ldr	r3, [pc, #128]	; (80023d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	429a      	cmp	r2, r3
 800235e:	d001      	beq.n	8002364 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e032      	b.n	80023ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	2b00      	cmp	r3, #0
 800236e:	d008      	beq.n	8002382 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002370:	4b19      	ldr	r3, [pc, #100]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	4916      	ldr	r1, [pc, #88]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 800237e:	4313      	orrs	r3, r2
 8002380:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	2b00      	cmp	r3, #0
 800238c:	d009      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800238e:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	490e      	ldr	r1, [pc, #56]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023a2:	f000 f821 	bl	80023e8 <HAL_RCC_GetSysClockFreq>
 80023a6:	4602      	mov	r2, r0
 80023a8:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	091b      	lsrs	r3, r3, #4
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	490a      	ldr	r1, [pc, #40]	; (80023dc <HAL_RCC_ClockConfig+0x1c8>)
 80023b4:	5ccb      	ldrb	r3, [r1, r3]
 80023b6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ba:	4a09      	ldr	r2, [pc, #36]	; (80023e0 <HAL_RCC_ClockConfig+0x1cc>)
 80023bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023be:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <HAL_RCC_ClockConfig+0x1d0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fe fd1a 	bl	8000dfc <HAL_InitTick>

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40022000 	.word	0x40022000
 80023d8:	40021000 	.word	0x40021000
 80023dc:	08003e6c 	.word	0x08003e6c
 80023e0:	20000028 	.word	0x20000028
 80023e4:	2000002c 	.word	0x2000002c

080023e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023e8:	b490      	push	{r4, r7}
 80023ea:	b08a      	sub	sp, #40	; 0x28
 80023ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023ee:	4b29      	ldr	r3, [pc, #164]	; (8002494 <HAL_RCC_GetSysClockFreq+0xac>)
 80023f0:	1d3c      	adds	r4, r7, #4
 80023f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023f8:	f240 2301 	movw	r3, #513	; 0x201
 80023fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
 8002402:	2300      	movs	r3, #0
 8002404:	61bb      	str	r3, [r7, #24]
 8002406:	2300      	movs	r3, #0
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800240e:	2300      	movs	r3, #0
 8002410:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002412:	4b21      	ldr	r3, [pc, #132]	; (8002498 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f003 030c 	and.w	r3, r3, #12
 800241e:	2b04      	cmp	r3, #4
 8002420:	d002      	beq.n	8002428 <HAL_RCC_GetSysClockFreq+0x40>
 8002422:	2b08      	cmp	r3, #8
 8002424:	d003      	beq.n	800242e <HAL_RCC_GetSysClockFreq+0x46>
 8002426:	e02b      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002428:	4b1c      	ldr	r3, [pc, #112]	; (800249c <HAL_RCC_GetSysClockFreq+0xb4>)
 800242a:	623b      	str	r3, [r7, #32]
      break;
 800242c:	e02b      	b.n	8002486 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	0c9b      	lsrs	r3, r3, #18
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	3328      	adds	r3, #40	; 0x28
 8002438:	443b      	add	r3, r7
 800243a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800243e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d012      	beq.n	8002470 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800244a:	4b13      	ldr	r3, [pc, #76]	; (8002498 <HAL_RCC_GetSysClockFreq+0xb0>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	0c5b      	lsrs	r3, r3, #17
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	3328      	adds	r3, #40	; 0x28
 8002456:	443b      	add	r3, r7
 8002458:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800245c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	4a0e      	ldr	r2, [pc, #56]	; (800249c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002462:	fb03 f202 	mul.w	r2, r3, r2
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	fbb2 f3f3 	udiv	r3, r2, r3
 800246c:	627b      	str	r3, [r7, #36]	; 0x24
 800246e:	e004      	b.n	800247a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	4a0b      	ldr	r2, [pc, #44]	; (80024a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002474:	fb02 f303 	mul.w	r3, r2, r3
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	623b      	str	r3, [r7, #32]
      break;
 800247e:	e002      	b.n	8002486 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002482:	623b      	str	r3, [r7, #32]
      break;
 8002484:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002486:	6a3b      	ldr	r3, [r7, #32]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3728      	adds	r7, #40	; 0x28
 800248c:	46bd      	mov	sp, r7
 800248e:	bc90      	pop	{r4, r7}
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	08003e4c 	.word	0x08003e4c
 8002498:	40021000 	.word	0x40021000
 800249c:	007a1200 	.word	0x007a1200
 80024a0:	003d0900 	.word	0x003d0900

080024a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024a8:	4b02      	ldr	r3, [pc, #8]	; (80024b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80024aa:	681b      	ldr	r3, [r3, #0]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr
 80024b4:	20000028 	.word	0x20000028

080024b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024bc:	f7ff fff2 	bl	80024a4 <HAL_RCC_GetHCLKFreq>
 80024c0:	4602      	mov	r2, r0
 80024c2:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	0a1b      	lsrs	r3, r3, #8
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	4903      	ldr	r1, [pc, #12]	; (80024dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ce:	5ccb      	ldrb	r3, [r1, r3]
 80024d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40021000 	.word	0x40021000
 80024dc:	08003e7c 	.word	0x08003e7c

080024e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024e4:	f7ff ffde 	bl	80024a4 <HAL_RCC_GetHCLKFreq>
 80024e8:	4602      	mov	r2, r0
 80024ea:	4b05      	ldr	r3, [pc, #20]	; (8002500 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	0adb      	lsrs	r3, r3, #11
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	4903      	ldr	r1, [pc, #12]	; (8002504 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024f6:	5ccb      	ldrb	r3, [r1, r3]
 80024f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40021000 	.word	0x40021000
 8002504:	08003e7c 	.word	0x08003e7c

08002508 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002510:	4b0a      	ldr	r3, [pc, #40]	; (800253c <RCC_Delay+0x34>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a0a      	ldr	r2, [pc, #40]	; (8002540 <RCC_Delay+0x38>)
 8002516:	fba2 2303 	umull	r2, r3, r2, r3
 800251a:	0a5b      	lsrs	r3, r3, #9
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	fb02 f303 	mul.w	r3, r2, r3
 8002522:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002524:	bf00      	nop
  }
  while (Delay --);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	1e5a      	subs	r2, r3, #1
 800252a:	60fa      	str	r2, [r7, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f9      	bne.n	8002524 <RCC_Delay+0x1c>
}
 8002530:	bf00      	nop
 8002532:	bf00      	nop
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr
 800253c:	20000028 	.word	0x20000028
 8002540:	10624dd3 	.word	0x10624dd3

08002544 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800254c:	2300      	movs	r3, #0
 800254e:	613b      	str	r3, [r7, #16]
 8002550:	2300      	movs	r3, #0
 8002552:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b00      	cmp	r3, #0
 800255e:	d07d      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002560:	2300      	movs	r3, #0
 8002562:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002564:	4b4f      	ldr	r3, [pc, #316]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10d      	bne.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002570:	4b4c      	ldr	r3, [pc, #304]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	4a4b      	ldr	r2, [pc, #300]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800257a:	61d3      	str	r3, [r2, #28]
 800257c:	4b49      	ldr	r3, [pc, #292]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800257e:	69db      	ldr	r3, [r3, #28]
 8002580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002588:	2301      	movs	r3, #1
 800258a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258c:	4b46      	ldr	r3, [pc, #280]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002594:	2b00      	cmp	r3, #0
 8002596:	d118      	bne.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002598:	4b43      	ldr	r3, [pc, #268]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a42      	ldr	r2, [pc, #264]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800259e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025a4:	f7fe fc6c 	bl	8000e80 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025aa:	e008      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ac:	f7fe fc68 	bl	8000e80 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b64      	cmp	r3, #100	; 0x64
 80025b8:	d901      	bls.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e06d      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025be:	4b3a      	ldr	r3, [pc, #232]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0f0      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025ca:	4b36      	ldr	r3, [pc, #216]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025d2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d02e      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d027      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025e8:	4b2e      	ldr	r3, [pc, #184]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025f0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025f2:	4b2e      	ldr	r3, [pc, #184]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025f8:	4b2c      	ldr	r3, [pc, #176]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80025fe:	4a29      	ldr	r2, [pc, #164]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d014      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260e:	f7fe fc37 	bl	8000e80 <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002614:	e00a      	b.n	800262c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002616:	f7fe fc33 	bl	8000e80 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	f241 3288 	movw	r2, #5000	; 0x1388
 8002624:	4293      	cmp	r3, r2
 8002626:	d901      	bls.n	800262c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e036      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800262c:	4b1d      	ldr	r3, [pc, #116]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0ee      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002638:	4b1a      	ldr	r3, [pc, #104]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	4917      	ldr	r1, [pc, #92]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002646:	4313      	orrs	r3, r2
 8002648:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800264a:	7dfb      	ldrb	r3, [r7, #23]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d105      	bne.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002650:	4b14      	ldr	r3, [pc, #80]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	4a13      	ldr	r2, [pc, #76]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002656:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800265a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d008      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002668:	4b0e      	ldr	r3, [pc, #56]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	490b      	ldr	r1, [pc, #44]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002676:	4313      	orrs	r3, r2
 8002678:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0310 	and.w	r3, r3, #16
 8002682:	2b00      	cmp	r3, #0
 8002684:	d008      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002686:	4b07      	ldr	r3, [pc, #28]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	4904      	ldr	r1, [pc, #16]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002694:	4313      	orrs	r3, r2
 8002696:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40021000 	.word	0x40021000
 80026a8:	40007000 	.word	0x40007000
 80026ac:	42420440 	.word	0x42420440

080026b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80026b0:	b590      	push	{r4, r7, lr}
 80026b2:	b08d      	sub	sp, #52	; 0x34
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026b8:	4b58      	ldr	r3, [pc, #352]	; (800281c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80026ba:	f107 040c 	add.w	r4, r7, #12
 80026be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026c4:	f240 2301 	movw	r3, #513	; 0x201
 80026c8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
 80026ce:	2300      	movs	r3, #0
 80026d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026d2:	2300      	movs	r3, #0
 80026d4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
 80026da:	2300      	movs	r3, #0
 80026dc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b10      	cmp	r3, #16
 80026e2:	d00a      	beq.n	80026fa <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b10      	cmp	r3, #16
 80026e8:	f200 808e 	bhi.w	8002808 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d049      	beq.n	8002786 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d079      	beq.n	80027ec <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80026f8:	e086      	b.n	8002808 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 80026fa:	4b49      	ldr	r3, [pc, #292]	; (8002820 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002700:	4b47      	ldr	r3, [pc, #284]	; (8002820 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d07f      	beq.n	800280c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	0c9b      	lsrs	r3, r3, #18
 8002710:	f003 030f 	and.w	r3, r3, #15
 8002714:	3330      	adds	r3, #48	; 0x30
 8002716:	443b      	add	r3, r7
 8002718:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800271c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d017      	beq.n	8002758 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002728:	4b3d      	ldr	r3, [pc, #244]	; (8002820 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	0c5b      	lsrs	r3, r3, #17
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	3330      	adds	r3, #48	; 0x30
 8002734:	443b      	add	r3, r7
 8002736:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00d      	beq.n	8002762 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002746:	4a37      	ldr	r2, [pc, #220]	; (8002824 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	fbb2 f2f3 	udiv	r2, r2, r3
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	fb02 f303 	mul.w	r3, r2, r3
 8002754:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002756:	e004      	b.n	8002762 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	4a33      	ldr	r2, [pc, #204]	; (8002828 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800275c:	fb02 f303 	mul.w	r3, r2, r3
 8002760:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002762:	4b2f      	ldr	r3, [pc, #188]	; (8002820 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800276a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800276e:	d102      	bne.n	8002776 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8002770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002772:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002774:	e04a      	b.n	800280c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8002776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	4a2c      	ldr	r2, [pc, #176]	; (800282c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800277c:	fba2 2303 	umull	r2, r3, r2, r3
 8002780:	085b      	lsrs	r3, r3, #1
 8002782:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002784:	e042      	b.n	800280c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8002786:	4b26      	ldr	r3, [pc, #152]	; (8002820 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002792:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002796:	d108      	bne.n	80027aa <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80027a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80027a8:	e01f      	b.n	80027ea <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027b4:	d109      	bne.n	80027ca <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80027b6:	4b1a      	ldr	r3, [pc, #104]	; (8002820 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80027b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 80027c2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80027c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80027c8:	e00f      	b.n	80027ea <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027d4:	d11c      	bne.n	8002810 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80027d6:	4b12      	ldr	r3, [pc, #72]	; (8002820 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d016      	beq.n	8002810 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 80027e2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80027e6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80027e8:	e012      	b.n	8002810 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80027ea:	e011      	b.n	8002810 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80027ec:	f7ff fe78 	bl	80024e0 <HAL_RCC_GetPCLK2Freq>
 80027f0:	4602      	mov	r2, r0
 80027f2:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	0b9b      	lsrs	r3, r3, #14
 80027f8:	f003 0303 	and.w	r3, r3, #3
 80027fc:	3301      	adds	r3, #1
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	fbb2 f3f3 	udiv	r3, r2, r3
 8002804:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002806:	e004      	b.n	8002812 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002808:	bf00      	nop
 800280a:	e002      	b.n	8002812 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800280c:	bf00      	nop
 800280e:	e000      	b.n	8002812 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002810:	bf00      	nop
    }
  }
  return (frequency);
 8002812:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002814:	4618      	mov	r0, r3
 8002816:	3734      	adds	r7, #52	; 0x34
 8002818:	46bd      	mov	sp, r7
 800281a:	bd90      	pop	{r4, r7, pc}
 800281c:	08003e5c 	.word	0x08003e5c
 8002820:	40021000 	.word	0x40021000
 8002824:	007a1200 	.word	0x007a1200
 8002828:	003d0900 	.word	0x003d0900
 800282c:	aaaaaaab 	.word	0xaaaaaaab

08002830 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e076      	b.n	8002930 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	2b00      	cmp	r3, #0
 8002848:	d108      	bne.n	800285c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002852:	d009      	beq.n	8002868 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	61da      	str	r2, [r3, #28]
 800285a:	e005      	b.n	8002868 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d106      	bne.n	8002888 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7fe f978 	bl	8000b78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800289e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80028b0:	431a      	orrs	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	431a      	orrs	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028d8:	431a      	orrs	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ec:	ea42 0103 	orr.w	r1, r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	0c1a      	lsrs	r2, r3, #16
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f002 0204 	and.w	r2, r2, #4
 800290e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	69da      	ldr	r2, [r3, #28]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800291e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b088      	sub	sp, #32
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	603b      	str	r3, [r7, #0]
 8002944:	4613      	mov	r3, r2
 8002946:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002948:	2300      	movs	r3, #0
 800294a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002952:	2b01      	cmp	r3, #1
 8002954:	d101      	bne.n	800295a <HAL_SPI_Transmit+0x22>
 8002956:	2302      	movs	r3, #2
 8002958:	e126      	b.n	8002ba8 <HAL_SPI_Transmit+0x270>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002962:	f7fe fa8d 	bl	8000e80 <HAL_GetTick>
 8002966:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002968:	88fb      	ldrh	r3, [r7, #6]
 800296a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b01      	cmp	r3, #1
 8002976:	d002      	beq.n	800297e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002978:	2302      	movs	r3, #2
 800297a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800297c:	e10b      	b.n	8002b96 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <HAL_SPI_Transmit+0x52>
 8002984:	88fb      	ldrh	r3, [r7, #6]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d102      	bne.n	8002990 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800298e:	e102      	b.n	8002b96 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2203      	movs	r2, #3
 8002994:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	68ba      	ldr	r2, [r7, #8]
 80029a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	88fa      	ldrh	r2, [r7, #6]
 80029a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	88fa      	ldrh	r2, [r7, #6]
 80029ae:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029d6:	d10f      	bne.n	80029f8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029f6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a02:	2b40      	cmp	r3, #64	; 0x40
 8002a04:	d007      	beq.n	8002a16 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a1e:	d14b      	bne.n	8002ab8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d002      	beq.n	8002a2e <HAL_SPI_Transmit+0xf6>
 8002a28:	8afb      	ldrh	r3, [r7, #22]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d13e      	bne.n	8002aac <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	881a      	ldrh	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	1c9a      	adds	r2, r3, #2
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a52:	e02b      	b.n	8002aac <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d112      	bne.n	8002a88 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	881a      	ldrh	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	1c9a      	adds	r2, r3, #2
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a86:	e011      	b.n	8002aac <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a88:	f7fe f9fa 	bl	8000e80 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d803      	bhi.n	8002aa0 <HAL_SPI_Transmit+0x168>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9e:	d102      	bne.n	8002aa6 <HAL_SPI_Transmit+0x16e>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d102      	bne.n	8002aac <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002aaa:	e074      	b.n	8002b96 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1ce      	bne.n	8002a54 <HAL_SPI_Transmit+0x11c>
 8002ab6:	e04c      	b.n	8002b52 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d002      	beq.n	8002ac6 <HAL_SPI_Transmit+0x18e>
 8002ac0:	8afb      	ldrh	r3, [r7, #22]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d140      	bne.n	8002b48 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	330c      	adds	r3, #12
 8002ad0:	7812      	ldrb	r2, [r2, #0]
 8002ad2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad8:	1c5a      	adds	r2, r3, #1
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002aec:	e02c      	b.n	8002b48 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d113      	bne.n	8002b24 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	330c      	adds	r3, #12
 8002b06:	7812      	ldrb	r2, [r2, #0]
 8002b08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b22:	e011      	b.n	8002b48 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b24:	f7fe f9ac 	bl	8000e80 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d803      	bhi.n	8002b3c <HAL_SPI_Transmit+0x204>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3a:	d102      	bne.n	8002b42 <HAL_SPI_Transmit+0x20a>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d102      	bne.n	8002b48 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b46:	e026      	b.n	8002b96 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1cd      	bne.n	8002aee <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	6839      	ldr	r1, [r7, #0]
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 fbb8 	bl	80032cc <SPI_EndRxTxTransaction>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2220      	movs	r2, #32
 8002b66:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10a      	bne.n	8002b86 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b70:	2300      	movs	r3, #0
 8002b72:	613b      	str	r3, [r7, #16]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	613b      	str	r3, [r7, #16]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	613b      	str	r3, [r7, #16]
 8002b84:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d002      	beq.n	8002b94 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	77fb      	strb	r3, [r7, #31]
 8002b92:	e000      	b.n	8002b96 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002b94:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ba6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3720      	adds	r7, #32
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b088      	sub	sp, #32
 8002bb4:	af02      	add	r7, sp, #8
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	603b      	str	r3, [r7, #0]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bcc:	d112      	bne.n	8002bf4 <HAL_SPI_Receive+0x44>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10e      	bne.n	8002bf4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2204      	movs	r2, #4
 8002bda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002bde:	88fa      	ldrh	r2, [r7, #6]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	4613      	mov	r3, r2
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	68b9      	ldr	r1, [r7, #8]
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 f8f1 	bl	8002dd2 <HAL_SPI_TransmitReceive>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	e0ea      	b.n	8002dca <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d101      	bne.n	8002c02 <HAL_SPI_Receive+0x52>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	e0e3      	b.n	8002dca <HAL_SPI_Receive+0x21a>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c0a:	f7fe f939 	bl	8000e80 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d002      	beq.n	8002c22 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c20:	e0ca      	b.n	8002db8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d002      	beq.n	8002c2e <HAL_SPI_Receive+0x7e>
 8002c28:	88fb      	ldrh	r3, [r7, #6]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d102      	bne.n	8002c34 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c32:	e0c1      	b.n	8002db8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2204      	movs	r2, #4
 8002c38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	88fa      	ldrh	r2, [r7, #6]
 8002c4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	88fa      	ldrh	r2, [r7, #6]
 8002c52:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c7a:	d10f      	bne.n	8002c9c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c8a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c9a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca6:	2b40      	cmp	r3, #64	; 0x40
 8002ca8:	d007      	beq.n	8002cba <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cb8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d162      	bne.n	8002d88 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002cc2:	e02e      	b.n	8002d22 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d115      	bne.n	8002cfe <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f103 020c 	add.w	r2, r3, #12
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cde:	7812      	ldrb	r2, [r2, #0]
 8002ce0:	b2d2      	uxtb	r2, r2
 8002ce2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce8:	1c5a      	adds	r2, r3, #1
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cfc:	e011      	b.n	8002d22 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cfe:	f7fe f8bf 	bl	8000e80 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d803      	bhi.n	8002d16 <HAL_SPI_Receive+0x166>
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d14:	d102      	bne.n	8002d1c <HAL_SPI_Receive+0x16c>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d102      	bne.n	8002d22 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002d20:	e04a      	b.n	8002db8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1cb      	bne.n	8002cc4 <HAL_SPI_Receive+0x114>
 8002d2c:	e031      	b.n	8002d92 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d113      	bne.n	8002d64 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d46:	b292      	uxth	r2, r2
 8002d48:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4e:	1c9a      	adds	r2, r3, #2
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d62:	e011      	b.n	8002d88 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d64:	f7fe f88c 	bl	8000e80 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d803      	bhi.n	8002d7c <HAL_SPI_Receive+0x1cc>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7a:	d102      	bne.n	8002d82 <HAL_SPI_Receive+0x1d2>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d102      	bne.n	8002d88 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002d86:	e017      	b.n	8002db8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1cd      	bne.n	8002d2e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	6839      	ldr	r1, [r7, #0]
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 fa46 	bl	8003228 <SPI_EndRxTransaction>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d002      	beq.n	8002da8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2220      	movs	r2, #32
 8002da6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d002      	beq.n	8002db6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	75fb      	strb	r3, [r7, #23]
 8002db4:	e000      	b.n	8002db8 <HAL_SPI_Receive+0x208>
  }

error :
 8002db6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3718      	adds	r7, #24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b08c      	sub	sp, #48	; 0x30
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	60f8      	str	r0, [r7, #12]
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	607a      	str	r2, [r7, #4]
 8002dde:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002de0:	2301      	movs	r3, #1
 8002de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002de4:	2300      	movs	r3, #0
 8002de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d101      	bne.n	8002df8 <HAL_SPI_TransmitReceive+0x26>
 8002df4:	2302      	movs	r3, #2
 8002df6:	e18a      	b.n	800310e <HAL_SPI_TransmitReceive+0x33c>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e00:	f7fe f83e 	bl	8000e80 <HAL_GetTick>
 8002e04:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002e16:	887b      	ldrh	r3, [r7, #2]
 8002e18:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d00f      	beq.n	8002e42 <HAL_SPI_TransmitReceive+0x70>
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e28:	d107      	bne.n	8002e3a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d103      	bne.n	8002e3a <HAL_SPI_TransmitReceive+0x68>
 8002e32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d003      	beq.n	8002e42 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e40:	e15b      	b.n	80030fa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d005      	beq.n	8002e54 <HAL_SPI_TransmitReceive+0x82>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d002      	beq.n	8002e54 <HAL_SPI_TransmitReceive+0x82>
 8002e4e:	887b      	ldrh	r3, [r7, #2]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d103      	bne.n	8002e5c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e5a:	e14e      	b.n	80030fa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d003      	beq.n	8002e70 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2205      	movs	r2, #5
 8002e6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	887a      	ldrh	r2, [r7, #2]
 8002e80:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	887a      	ldrh	r2, [r7, #2]
 8002e86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	887a      	ldrh	r2, [r7, #2]
 8002e92:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	887a      	ldrh	r2, [r7, #2]
 8002e98:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb0:	2b40      	cmp	r3, #64	; 0x40
 8002eb2:	d007      	beq.n	8002ec4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ec2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ecc:	d178      	bne.n	8002fc0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d002      	beq.n	8002edc <HAL_SPI_TransmitReceive+0x10a>
 8002ed6:	8b7b      	ldrh	r3, [r7, #26]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d166      	bne.n	8002faa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee0:	881a      	ldrh	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eec:	1c9a      	adds	r2, r3, #2
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f00:	e053      	b.n	8002faa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d11b      	bne.n	8002f48 <HAL_SPI_TransmitReceive+0x176>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d016      	beq.n	8002f48 <HAL_SPI_TransmitReceive+0x176>
 8002f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d113      	bne.n	8002f48 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f24:	881a      	ldrh	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f30:	1c9a      	adds	r2, r3, #2
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d119      	bne.n	8002f8a <HAL_SPI_TransmitReceive+0x1b8>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d014      	beq.n	8002f8a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6a:	b292      	uxth	r2, r2
 8002f6c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f72:	1c9a      	adds	r2, r3, #2
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f86:	2301      	movs	r3, #1
 8002f88:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f8a:	f7fd ff79 	bl	8000e80 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d807      	bhi.n	8002faa <HAL_SPI_TransmitReceive+0x1d8>
 8002f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa0:	d003      	beq.n	8002faa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002fa8:	e0a7      	b.n	80030fa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1a6      	bne.n	8002f02 <HAL_SPI_TransmitReceive+0x130>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1a1      	bne.n	8002f02 <HAL_SPI_TransmitReceive+0x130>
 8002fbe:	e07c      	b.n	80030ba <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d002      	beq.n	8002fce <HAL_SPI_TransmitReceive+0x1fc>
 8002fc8:	8b7b      	ldrh	r3, [r7, #26]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d16b      	bne.n	80030a6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	330c      	adds	r3, #12
 8002fd8:	7812      	ldrb	r2, [r2, #0]
 8002fda:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe0:	1c5a      	adds	r2, r3, #1
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	3b01      	subs	r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ff4:	e057      	b.n	80030a6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b02      	cmp	r3, #2
 8003002:	d11c      	bne.n	800303e <HAL_SPI_TransmitReceive+0x26c>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003008:	b29b      	uxth	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d017      	beq.n	800303e <HAL_SPI_TransmitReceive+0x26c>
 800300e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003010:	2b01      	cmp	r3, #1
 8003012:	d114      	bne.n	800303e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	330c      	adds	r3, #12
 800301e:	7812      	ldrb	r2, [r2, #0]
 8003020:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	1c5a      	adds	r2, r3, #1
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003030:	b29b      	uxth	r3, r3
 8003032:	3b01      	subs	r3, #1
 8003034:	b29a      	uxth	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800303a:	2300      	movs	r3, #0
 800303c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b01      	cmp	r3, #1
 800304a:	d119      	bne.n	8003080 <HAL_SPI_TransmitReceive+0x2ae>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003050:	b29b      	uxth	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d014      	beq.n	8003080 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003072:	b29b      	uxth	r3, r3
 8003074:	3b01      	subs	r3, #1
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800307c:	2301      	movs	r3, #1
 800307e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003080:	f7fd fefe 	bl	8000e80 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800308c:	429a      	cmp	r2, r3
 800308e:	d803      	bhi.n	8003098 <HAL_SPI_TransmitReceive+0x2c6>
 8003090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003096:	d102      	bne.n	800309e <HAL_SPI_TransmitReceive+0x2cc>
 8003098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309a:	2b00      	cmp	r3, #0
 800309c:	d103      	bne.n	80030a6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80030a4:	e029      	b.n	80030fa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1a2      	bne.n	8002ff6 <HAL_SPI_TransmitReceive+0x224>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d19d      	bne.n	8002ff6 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f904 	bl	80032cc <SPI_EndRxTxTransaction>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d006      	beq.n	80030d8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2220      	movs	r2, #32
 80030d4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80030d6:	e010      	b.n	80030fa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10b      	bne.n	80030f8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030e0:	2300      	movs	r3, #0
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	617b      	str	r3, [r7, #20]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	e000      	b.n	80030fa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80030f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800310a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800310e:	4618      	mov	r0, r3
 8003110:	3730      	adds	r7, #48	; 0x30
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	603b      	str	r3, [r7, #0]
 8003124:	4613      	mov	r3, r2
 8003126:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003128:	f7fd feaa 	bl	8000e80 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003130:	1a9b      	subs	r3, r3, r2
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	4413      	add	r3, r2
 8003136:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003138:	f7fd fea2 	bl	8000e80 <HAL_GetTick>
 800313c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800313e:	4b39      	ldr	r3, [pc, #228]	; (8003224 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	015b      	lsls	r3, r3, #5
 8003144:	0d1b      	lsrs	r3, r3, #20
 8003146:	69fa      	ldr	r2, [r7, #28]
 8003148:	fb02 f303 	mul.w	r3, r2, r3
 800314c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800314e:	e054      	b.n	80031fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003156:	d050      	beq.n	80031fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003158:	f7fd fe92 	bl	8000e80 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	69fa      	ldr	r2, [r7, #28]
 8003164:	429a      	cmp	r2, r3
 8003166:	d902      	bls.n	800316e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d13d      	bne.n	80031ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800317c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003186:	d111      	bne.n	80031ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003190:	d004      	beq.n	800319c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800319a:	d107      	bne.n	80031ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031b4:	d10f      	bne.n	80031d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e017      	b.n	800321a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	3b01      	subs	r3, #1
 80031f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	4013      	ands	r3, r2
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	429a      	cmp	r2, r3
 8003208:	bf0c      	ite	eq
 800320a:	2301      	moveq	r3, #1
 800320c:	2300      	movne	r3, #0
 800320e:	b2db      	uxtb	r3, r3
 8003210:	461a      	mov	r2, r3
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	429a      	cmp	r2, r3
 8003216:	d19b      	bne.n	8003150 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3720      	adds	r7, #32
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20000028 	.word	0x20000028

08003228 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af02      	add	r7, sp, #8
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800323c:	d111      	bne.n	8003262 <SPI_EndRxTransaction+0x3a>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003246:	d004      	beq.n	8003252 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003250:	d107      	bne.n	8003262 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003260:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800326a:	d117      	bne.n	800329c <SPI_EndRxTransaction+0x74>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003274:	d112      	bne.n	800329c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2200      	movs	r2, #0
 800327e:	2101      	movs	r1, #1
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f7ff ff49 	bl	8003118 <SPI_WaitFlagStateUntilTimeout>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d01a      	beq.n	80032c2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003290:	f043 0220 	orr.w	r2, r3, #32
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e013      	b.n	80032c4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2200      	movs	r2, #0
 80032a4:	2180      	movs	r1, #128	; 0x80
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f7ff ff36 	bl	8003118 <SPI_WaitFlagStateUntilTimeout>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d007      	beq.n	80032c2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b6:	f043 0220 	orr.w	r2, r3, #32
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e000      	b.n	80032c4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af02      	add	r7, sp, #8
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	2200      	movs	r2, #0
 80032e0:	2180      	movs	r1, #128	; 0x80
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f7ff ff18 	bl	8003118 <SPI_WaitFlagStateUntilTimeout>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d007      	beq.n	80032fe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f2:	f043 0220 	orr.w	r2, r3, #32
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e000      	b.n	8003300 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e03f      	b.n	800339a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d106      	bne.n	8003334 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7fd fc6c 	bl	8000c0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2224      	movs	r2, #36	; 0x24
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800334a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f829 	bl	80033a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	691a      	ldr	r2, [r3, #16]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003360:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695a      	ldr	r2, [r3, #20]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003370:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68da      	ldr	r2, [r3, #12]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003380:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2220      	movs	r2, #32
 8003394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
	...

080033a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	431a      	orrs	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80033de:	f023 030c 	bic.w	r3, r3, #12
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6812      	ldr	r2, [r2, #0]
 80033e6:	68b9      	ldr	r1, [r7, #8]
 80033e8:	430b      	orrs	r3, r1
 80033ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699a      	ldr	r2, [r3, #24]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a2c      	ldr	r2, [pc, #176]	; (80034b8 <UART_SetConfig+0x114>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d103      	bne.n	8003414 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800340c:	f7ff f868 	bl	80024e0 <HAL_RCC_GetPCLK2Freq>
 8003410:	60f8      	str	r0, [r7, #12]
 8003412:	e002      	b.n	800341a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003414:	f7ff f850 	bl	80024b8 <HAL_RCC_GetPCLK1Freq>
 8003418:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	009a      	lsls	r2, r3, #2
 8003424:	441a      	add	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003430:	4a22      	ldr	r2, [pc, #136]	; (80034bc <UART_SetConfig+0x118>)
 8003432:	fba2 2303 	umull	r2, r3, r2, r3
 8003436:	095b      	lsrs	r3, r3, #5
 8003438:	0119      	lsls	r1, r3, #4
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	4613      	mov	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	009a      	lsls	r2, r3, #2
 8003444:	441a      	add	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003450:	4b1a      	ldr	r3, [pc, #104]	; (80034bc <UART_SetConfig+0x118>)
 8003452:	fba3 0302 	umull	r0, r3, r3, r2
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	2064      	movs	r0, #100	; 0x64
 800345a:	fb00 f303 	mul.w	r3, r0, r3
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	3332      	adds	r3, #50	; 0x32
 8003464:	4a15      	ldr	r2, [pc, #84]	; (80034bc <UART_SetConfig+0x118>)
 8003466:	fba2 2303 	umull	r2, r3, r2, r3
 800346a:	095b      	lsrs	r3, r3, #5
 800346c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003470:	4419      	add	r1, r3
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	4613      	mov	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	009a      	lsls	r2, r3, #2
 800347c:	441a      	add	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	fbb2 f2f3 	udiv	r2, r2, r3
 8003488:	4b0c      	ldr	r3, [pc, #48]	; (80034bc <UART_SetConfig+0x118>)
 800348a:	fba3 0302 	umull	r0, r3, r3, r2
 800348e:	095b      	lsrs	r3, r3, #5
 8003490:	2064      	movs	r0, #100	; 0x64
 8003492:	fb00 f303 	mul.w	r3, r0, r3
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	3332      	adds	r3, #50	; 0x32
 800349c:	4a07      	ldr	r2, [pc, #28]	; (80034bc <UART_SetConfig+0x118>)
 800349e:	fba2 2303 	umull	r2, r3, r2, r3
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	f003 020f 	and.w	r2, r3, #15
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	440a      	add	r2, r1
 80034ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80034b0:	bf00      	nop
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40013800 	.word	0x40013800
 80034bc:	51eb851f 	.word	0x51eb851f

080034c0 <__errno>:
 80034c0:	4b01      	ldr	r3, [pc, #4]	; (80034c8 <__errno+0x8>)
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	20000034 	.word	0x20000034

080034cc <__libc_init_array>:
 80034cc:	b570      	push	{r4, r5, r6, lr}
 80034ce:	2600      	movs	r6, #0
 80034d0:	4d0c      	ldr	r5, [pc, #48]	; (8003504 <__libc_init_array+0x38>)
 80034d2:	4c0d      	ldr	r4, [pc, #52]	; (8003508 <__libc_init_array+0x3c>)
 80034d4:	1b64      	subs	r4, r4, r5
 80034d6:	10a4      	asrs	r4, r4, #2
 80034d8:	42a6      	cmp	r6, r4
 80034da:	d109      	bne.n	80034f0 <__libc_init_array+0x24>
 80034dc:	f000 fc9c 	bl	8003e18 <_init>
 80034e0:	2600      	movs	r6, #0
 80034e2:	4d0a      	ldr	r5, [pc, #40]	; (800350c <__libc_init_array+0x40>)
 80034e4:	4c0a      	ldr	r4, [pc, #40]	; (8003510 <__libc_init_array+0x44>)
 80034e6:	1b64      	subs	r4, r4, r5
 80034e8:	10a4      	asrs	r4, r4, #2
 80034ea:	42a6      	cmp	r6, r4
 80034ec:	d105      	bne.n	80034fa <__libc_init_array+0x2e>
 80034ee:	bd70      	pop	{r4, r5, r6, pc}
 80034f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80034f4:	4798      	blx	r3
 80034f6:	3601      	adds	r6, #1
 80034f8:	e7ee      	b.n	80034d8 <__libc_init_array+0xc>
 80034fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80034fe:	4798      	blx	r3
 8003500:	3601      	adds	r6, #1
 8003502:	e7f2      	b.n	80034ea <__libc_init_array+0x1e>
 8003504:	08003eb8 	.word	0x08003eb8
 8003508:	08003eb8 	.word	0x08003eb8
 800350c:	08003eb8 	.word	0x08003eb8
 8003510:	08003ebc 	.word	0x08003ebc

08003514 <memset>:
 8003514:	4603      	mov	r3, r0
 8003516:	4402      	add	r2, r0
 8003518:	4293      	cmp	r3, r2
 800351a:	d100      	bne.n	800351e <memset+0xa>
 800351c:	4770      	bx	lr
 800351e:	f803 1b01 	strb.w	r1, [r3], #1
 8003522:	e7f9      	b.n	8003518 <memset+0x4>

08003524 <siprintf>:
 8003524:	b40e      	push	{r1, r2, r3}
 8003526:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800352a:	b500      	push	{lr}
 800352c:	b09c      	sub	sp, #112	; 0x70
 800352e:	ab1d      	add	r3, sp, #116	; 0x74
 8003530:	9002      	str	r0, [sp, #8]
 8003532:	9006      	str	r0, [sp, #24]
 8003534:	9107      	str	r1, [sp, #28]
 8003536:	9104      	str	r1, [sp, #16]
 8003538:	4808      	ldr	r0, [pc, #32]	; (800355c <siprintf+0x38>)
 800353a:	4909      	ldr	r1, [pc, #36]	; (8003560 <siprintf+0x3c>)
 800353c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003540:	9105      	str	r1, [sp, #20]
 8003542:	6800      	ldr	r0, [r0, #0]
 8003544:	a902      	add	r1, sp, #8
 8003546:	9301      	str	r3, [sp, #4]
 8003548:	f000 f868 	bl	800361c <_svfiprintf_r>
 800354c:	2200      	movs	r2, #0
 800354e:	9b02      	ldr	r3, [sp, #8]
 8003550:	701a      	strb	r2, [r3, #0]
 8003552:	b01c      	add	sp, #112	; 0x70
 8003554:	f85d eb04 	ldr.w	lr, [sp], #4
 8003558:	b003      	add	sp, #12
 800355a:	4770      	bx	lr
 800355c:	20000034 	.word	0x20000034
 8003560:	ffff0208 	.word	0xffff0208

08003564 <__ssputs_r>:
 8003564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003568:	688e      	ldr	r6, [r1, #8]
 800356a:	4682      	mov	sl, r0
 800356c:	429e      	cmp	r6, r3
 800356e:	460c      	mov	r4, r1
 8003570:	4690      	mov	r8, r2
 8003572:	461f      	mov	r7, r3
 8003574:	d838      	bhi.n	80035e8 <__ssputs_r+0x84>
 8003576:	898a      	ldrh	r2, [r1, #12]
 8003578:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800357c:	d032      	beq.n	80035e4 <__ssputs_r+0x80>
 800357e:	6825      	ldr	r5, [r4, #0]
 8003580:	6909      	ldr	r1, [r1, #16]
 8003582:	3301      	adds	r3, #1
 8003584:	eba5 0901 	sub.w	r9, r5, r1
 8003588:	6965      	ldr	r5, [r4, #20]
 800358a:	444b      	add	r3, r9
 800358c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003590:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003594:	106d      	asrs	r5, r5, #1
 8003596:	429d      	cmp	r5, r3
 8003598:	bf38      	it	cc
 800359a:	461d      	movcc	r5, r3
 800359c:	0553      	lsls	r3, r2, #21
 800359e:	d531      	bpl.n	8003604 <__ssputs_r+0xa0>
 80035a0:	4629      	mov	r1, r5
 80035a2:	f000 fb6f 	bl	8003c84 <_malloc_r>
 80035a6:	4606      	mov	r6, r0
 80035a8:	b950      	cbnz	r0, 80035c0 <__ssputs_r+0x5c>
 80035aa:	230c      	movs	r3, #12
 80035ac:	f04f 30ff 	mov.w	r0, #4294967295
 80035b0:	f8ca 3000 	str.w	r3, [sl]
 80035b4:	89a3      	ldrh	r3, [r4, #12]
 80035b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035ba:	81a3      	strh	r3, [r4, #12]
 80035bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035c0:	464a      	mov	r2, r9
 80035c2:	6921      	ldr	r1, [r4, #16]
 80035c4:	f000 face 	bl	8003b64 <memcpy>
 80035c8:	89a3      	ldrh	r3, [r4, #12]
 80035ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80035ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035d2:	81a3      	strh	r3, [r4, #12]
 80035d4:	6126      	str	r6, [r4, #16]
 80035d6:	444e      	add	r6, r9
 80035d8:	6026      	str	r6, [r4, #0]
 80035da:	463e      	mov	r6, r7
 80035dc:	6165      	str	r5, [r4, #20]
 80035de:	eba5 0509 	sub.w	r5, r5, r9
 80035e2:	60a5      	str	r5, [r4, #8]
 80035e4:	42be      	cmp	r6, r7
 80035e6:	d900      	bls.n	80035ea <__ssputs_r+0x86>
 80035e8:	463e      	mov	r6, r7
 80035ea:	4632      	mov	r2, r6
 80035ec:	4641      	mov	r1, r8
 80035ee:	6820      	ldr	r0, [r4, #0]
 80035f0:	f000 fac6 	bl	8003b80 <memmove>
 80035f4:	68a3      	ldr	r3, [r4, #8]
 80035f6:	2000      	movs	r0, #0
 80035f8:	1b9b      	subs	r3, r3, r6
 80035fa:	60a3      	str	r3, [r4, #8]
 80035fc:	6823      	ldr	r3, [r4, #0]
 80035fe:	4433      	add	r3, r6
 8003600:	6023      	str	r3, [r4, #0]
 8003602:	e7db      	b.n	80035bc <__ssputs_r+0x58>
 8003604:	462a      	mov	r2, r5
 8003606:	f000 fbb1 	bl	8003d6c <_realloc_r>
 800360a:	4606      	mov	r6, r0
 800360c:	2800      	cmp	r0, #0
 800360e:	d1e1      	bne.n	80035d4 <__ssputs_r+0x70>
 8003610:	4650      	mov	r0, sl
 8003612:	6921      	ldr	r1, [r4, #16]
 8003614:	f000 face 	bl	8003bb4 <_free_r>
 8003618:	e7c7      	b.n	80035aa <__ssputs_r+0x46>
	...

0800361c <_svfiprintf_r>:
 800361c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003620:	4698      	mov	r8, r3
 8003622:	898b      	ldrh	r3, [r1, #12]
 8003624:	4607      	mov	r7, r0
 8003626:	061b      	lsls	r3, r3, #24
 8003628:	460d      	mov	r5, r1
 800362a:	4614      	mov	r4, r2
 800362c:	b09d      	sub	sp, #116	; 0x74
 800362e:	d50e      	bpl.n	800364e <_svfiprintf_r+0x32>
 8003630:	690b      	ldr	r3, [r1, #16]
 8003632:	b963      	cbnz	r3, 800364e <_svfiprintf_r+0x32>
 8003634:	2140      	movs	r1, #64	; 0x40
 8003636:	f000 fb25 	bl	8003c84 <_malloc_r>
 800363a:	6028      	str	r0, [r5, #0]
 800363c:	6128      	str	r0, [r5, #16]
 800363e:	b920      	cbnz	r0, 800364a <_svfiprintf_r+0x2e>
 8003640:	230c      	movs	r3, #12
 8003642:	603b      	str	r3, [r7, #0]
 8003644:	f04f 30ff 	mov.w	r0, #4294967295
 8003648:	e0d1      	b.n	80037ee <_svfiprintf_r+0x1d2>
 800364a:	2340      	movs	r3, #64	; 0x40
 800364c:	616b      	str	r3, [r5, #20]
 800364e:	2300      	movs	r3, #0
 8003650:	9309      	str	r3, [sp, #36]	; 0x24
 8003652:	2320      	movs	r3, #32
 8003654:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003658:	2330      	movs	r3, #48	; 0x30
 800365a:	f04f 0901 	mov.w	r9, #1
 800365e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003662:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003808 <_svfiprintf_r+0x1ec>
 8003666:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800366a:	4623      	mov	r3, r4
 800366c:	469a      	mov	sl, r3
 800366e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003672:	b10a      	cbz	r2, 8003678 <_svfiprintf_r+0x5c>
 8003674:	2a25      	cmp	r2, #37	; 0x25
 8003676:	d1f9      	bne.n	800366c <_svfiprintf_r+0x50>
 8003678:	ebba 0b04 	subs.w	fp, sl, r4
 800367c:	d00b      	beq.n	8003696 <_svfiprintf_r+0x7a>
 800367e:	465b      	mov	r3, fp
 8003680:	4622      	mov	r2, r4
 8003682:	4629      	mov	r1, r5
 8003684:	4638      	mov	r0, r7
 8003686:	f7ff ff6d 	bl	8003564 <__ssputs_r>
 800368a:	3001      	adds	r0, #1
 800368c:	f000 80aa 	beq.w	80037e4 <_svfiprintf_r+0x1c8>
 8003690:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003692:	445a      	add	r2, fp
 8003694:	9209      	str	r2, [sp, #36]	; 0x24
 8003696:	f89a 3000 	ldrb.w	r3, [sl]
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 80a2 	beq.w	80037e4 <_svfiprintf_r+0x1c8>
 80036a0:	2300      	movs	r3, #0
 80036a2:	f04f 32ff 	mov.w	r2, #4294967295
 80036a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036aa:	f10a 0a01 	add.w	sl, sl, #1
 80036ae:	9304      	str	r3, [sp, #16]
 80036b0:	9307      	str	r3, [sp, #28]
 80036b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036b6:	931a      	str	r3, [sp, #104]	; 0x68
 80036b8:	4654      	mov	r4, sl
 80036ba:	2205      	movs	r2, #5
 80036bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036c0:	4851      	ldr	r0, [pc, #324]	; (8003808 <_svfiprintf_r+0x1ec>)
 80036c2:	f000 fa41 	bl	8003b48 <memchr>
 80036c6:	9a04      	ldr	r2, [sp, #16]
 80036c8:	b9d8      	cbnz	r0, 8003702 <_svfiprintf_r+0xe6>
 80036ca:	06d0      	lsls	r0, r2, #27
 80036cc:	bf44      	itt	mi
 80036ce:	2320      	movmi	r3, #32
 80036d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036d4:	0711      	lsls	r1, r2, #28
 80036d6:	bf44      	itt	mi
 80036d8:	232b      	movmi	r3, #43	; 0x2b
 80036da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036de:	f89a 3000 	ldrb.w	r3, [sl]
 80036e2:	2b2a      	cmp	r3, #42	; 0x2a
 80036e4:	d015      	beq.n	8003712 <_svfiprintf_r+0xf6>
 80036e6:	4654      	mov	r4, sl
 80036e8:	2000      	movs	r0, #0
 80036ea:	f04f 0c0a 	mov.w	ip, #10
 80036ee:	9a07      	ldr	r2, [sp, #28]
 80036f0:	4621      	mov	r1, r4
 80036f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036f6:	3b30      	subs	r3, #48	; 0x30
 80036f8:	2b09      	cmp	r3, #9
 80036fa:	d94e      	bls.n	800379a <_svfiprintf_r+0x17e>
 80036fc:	b1b0      	cbz	r0, 800372c <_svfiprintf_r+0x110>
 80036fe:	9207      	str	r2, [sp, #28]
 8003700:	e014      	b.n	800372c <_svfiprintf_r+0x110>
 8003702:	eba0 0308 	sub.w	r3, r0, r8
 8003706:	fa09 f303 	lsl.w	r3, r9, r3
 800370a:	4313      	orrs	r3, r2
 800370c:	46a2      	mov	sl, r4
 800370e:	9304      	str	r3, [sp, #16]
 8003710:	e7d2      	b.n	80036b8 <_svfiprintf_r+0x9c>
 8003712:	9b03      	ldr	r3, [sp, #12]
 8003714:	1d19      	adds	r1, r3, #4
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	9103      	str	r1, [sp, #12]
 800371a:	2b00      	cmp	r3, #0
 800371c:	bfbb      	ittet	lt
 800371e:	425b      	neglt	r3, r3
 8003720:	f042 0202 	orrlt.w	r2, r2, #2
 8003724:	9307      	strge	r3, [sp, #28]
 8003726:	9307      	strlt	r3, [sp, #28]
 8003728:	bfb8      	it	lt
 800372a:	9204      	strlt	r2, [sp, #16]
 800372c:	7823      	ldrb	r3, [r4, #0]
 800372e:	2b2e      	cmp	r3, #46	; 0x2e
 8003730:	d10c      	bne.n	800374c <_svfiprintf_r+0x130>
 8003732:	7863      	ldrb	r3, [r4, #1]
 8003734:	2b2a      	cmp	r3, #42	; 0x2a
 8003736:	d135      	bne.n	80037a4 <_svfiprintf_r+0x188>
 8003738:	9b03      	ldr	r3, [sp, #12]
 800373a:	3402      	adds	r4, #2
 800373c:	1d1a      	adds	r2, r3, #4
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	9203      	str	r2, [sp, #12]
 8003742:	2b00      	cmp	r3, #0
 8003744:	bfb8      	it	lt
 8003746:	f04f 33ff 	movlt.w	r3, #4294967295
 800374a:	9305      	str	r3, [sp, #20]
 800374c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800380c <_svfiprintf_r+0x1f0>
 8003750:	2203      	movs	r2, #3
 8003752:	4650      	mov	r0, sl
 8003754:	7821      	ldrb	r1, [r4, #0]
 8003756:	f000 f9f7 	bl	8003b48 <memchr>
 800375a:	b140      	cbz	r0, 800376e <_svfiprintf_r+0x152>
 800375c:	2340      	movs	r3, #64	; 0x40
 800375e:	eba0 000a 	sub.w	r0, r0, sl
 8003762:	fa03 f000 	lsl.w	r0, r3, r0
 8003766:	9b04      	ldr	r3, [sp, #16]
 8003768:	3401      	adds	r4, #1
 800376a:	4303      	orrs	r3, r0
 800376c:	9304      	str	r3, [sp, #16]
 800376e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003772:	2206      	movs	r2, #6
 8003774:	4826      	ldr	r0, [pc, #152]	; (8003810 <_svfiprintf_r+0x1f4>)
 8003776:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800377a:	f000 f9e5 	bl	8003b48 <memchr>
 800377e:	2800      	cmp	r0, #0
 8003780:	d038      	beq.n	80037f4 <_svfiprintf_r+0x1d8>
 8003782:	4b24      	ldr	r3, [pc, #144]	; (8003814 <_svfiprintf_r+0x1f8>)
 8003784:	bb1b      	cbnz	r3, 80037ce <_svfiprintf_r+0x1b2>
 8003786:	9b03      	ldr	r3, [sp, #12]
 8003788:	3307      	adds	r3, #7
 800378a:	f023 0307 	bic.w	r3, r3, #7
 800378e:	3308      	adds	r3, #8
 8003790:	9303      	str	r3, [sp, #12]
 8003792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003794:	4433      	add	r3, r6
 8003796:	9309      	str	r3, [sp, #36]	; 0x24
 8003798:	e767      	b.n	800366a <_svfiprintf_r+0x4e>
 800379a:	460c      	mov	r4, r1
 800379c:	2001      	movs	r0, #1
 800379e:	fb0c 3202 	mla	r2, ip, r2, r3
 80037a2:	e7a5      	b.n	80036f0 <_svfiprintf_r+0xd4>
 80037a4:	2300      	movs	r3, #0
 80037a6:	f04f 0c0a 	mov.w	ip, #10
 80037aa:	4619      	mov	r1, r3
 80037ac:	3401      	adds	r4, #1
 80037ae:	9305      	str	r3, [sp, #20]
 80037b0:	4620      	mov	r0, r4
 80037b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037b6:	3a30      	subs	r2, #48	; 0x30
 80037b8:	2a09      	cmp	r2, #9
 80037ba:	d903      	bls.n	80037c4 <_svfiprintf_r+0x1a8>
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0c5      	beq.n	800374c <_svfiprintf_r+0x130>
 80037c0:	9105      	str	r1, [sp, #20]
 80037c2:	e7c3      	b.n	800374c <_svfiprintf_r+0x130>
 80037c4:	4604      	mov	r4, r0
 80037c6:	2301      	movs	r3, #1
 80037c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80037cc:	e7f0      	b.n	80037b0 <_svfiprintf_r+0x194>
 80037ce:	ab03      	add	r3, sp, #12
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	462a      	mov	r2, r5
 80037d4:	4638      	mov	r0, r7
 80037d6:	4b10      	ldr	r3, [pc, #64]	; (8003818 <_svfiprintf_r+0x1fc>)
 80037d8:	a904      	add	r1, sp, #16
 80037da:	f3af 8000 	nop.w
 80037de:	1c42      	adds	r2, r0, #1
 80037e0:	4606      	mov	r6, r0
 80037e2:	d1d6      	bne.n	8003792 <_svfiprintf_r+0x176>
 80037e4:	89ab      	ldrh	r3, [r5, #12]
 80037e6:	065b      	lsls	r3, r3, #25
 80037e8:	f53f af2c 	bmi.w	8003644 <_svfiprintf_r+0x28>
 80037ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80037ee:	b01d      	add	sp, #116	; 0x74
 80037f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037f4:	ab03      	add	r3, sp, #12
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	462a      	mov	r2, r5
 80037fa:	4638      	mov	r0, r7
 80037fc:	4b06      	ldr	r3, [pc, #24]	; (8003818 <_svfiprintf_r+0x1fc>)
 80037fe:	a904      	add	r1, sp, #16
 8003800:	f000 f87c 	bl	80038fc <_printf_i>
 8003804:	e7eb      	b.n	80037de <_svfiprintf_r+0x1c2>
 8003806:	bf00      	nop
 8003808:	08003e84 	.word	0x08003e84
 800380c:	08003e8a 	.word	0x08003e8a
 8003810:	08003e8e 	.word	0x08003e8e
 8003814:	00000000 	.word	0x00000000
 8003818:	08003565 	.word	0x08003565

0800381c <_printf_common>:
 800381c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003820:	4616      	mov	r6, r2
 8003822:	4699      	mov	r9, r3
 8003824:	688a      	ldr	r2, [r1, #8]
 8003826:	690b      	ldr	r3, [r1, #16]
 8003828:	4607      	mov	r7, r0
 800382a:	4293      	cmp	r3, r2
 800382c:	bfb8      	it	lt
 800382e:	4613      	movlt	r3, r2
 8003830:	6033      	str	r3, [r6, #0]
 8003832:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003836:	460c      	mov	r4, r1
 8003838:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800383c:	b10a      	cbz	r2, 8003842 <_printf_common+0x26>
 800383e:	3301      	adds	r3, #1
 8003840:	6033      	str	r3, [r6, #0]
 8003842:	6823      	ldr	r3, [r4, #0]
 8003844:	0699      	lsls	r1, r3, #26
 8003846:	bf42      	ittt	mi
 8003848:	6833      	ldrmi	r3, [r6, #0]
 800384a:	3302      	addmi	r3, #2
 800384c:	6033      	strmi	r3, [r6, #0]
 800384e:	6825      	ldr	r5, [r4, #0]
 8003850:	f015 0506 	ands.w	r5, r5, #6
 8003854:	d106      	bne.n	8003864 <_printf_common+0x48>
 8003856:	f104 0a19 	add.w	sl, r4, #25
 800385a:	68e3      	ldr	r3, [r4, #12]
 800385c:	6832      	ldr	r2, [r6, #0]
 800385e:	1a9b      	subs	r3, r3, r2
 8003860:	42ab      	cmp	r3, r5
 8003862:	dc28      	bgt.n	80038b6 <_printf_common+0x9a>
 8003864:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003868:	1e13      	subs	r3, r2, #0
 800386a:	6822      	ldr	r2, [r4, #0]
 800386c:	bf18      	it	ne
 800386e:	2301      	movne	r3, #1
 8003870:	0692      	lsls	r2, r2, #26
 8003872:	d42d      	bmi.n	80038d0 <_printf_common+0xb4>
 8003874:	4649      	mov	r1, r9
 8003876:	4638      	mov	r0, r7
 8003878:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800387c:	47c0      	blx	r8
 800387e:	3001      	adds	r0, #1
 8003880:	d020      	beq.n	80038c4 <_printf_common+0xa8>
 8003882:	6823      	ldr	r3, [r4, #0]
 8003884:	68e5      	ldr	r5, [r4, #12]
 8003886:	f003 0306 	and.w	r3, r3, #6
 800388a:	2b04      	cmp	r3, #4
 800388c:	bf18      	it	ne
 800388e:	2500      	movne	r5, #0
 8003890:	6832      	ldr	r2, [r6, #0]
 8003892:	f04f 0600 	mov.w	r6, #0
 8003896:	68a3      	ldr	r3, [r4, #8]
 8003898:	bf08      	it	eq
 800389a:	1aad      	subeq	r5, r5, r2
 800389c:	6922      	ldr	r2, [r4, #16]
 800389e:	bf08      	it	eq
 80038a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038a4:	4293      	cmp	r3, r2
 80038a6:	bfc4      	itt	gt
 80038a8:	1a9b      	subgt	r3, r3, r2
 80038aa:	18ed      	addgt	r5, r5, r3
 80038ac:	341a      	adds	r4, #26
 80038ae:	42b5      	cmp	r5, r6
 80038b0:	d11a      	bne.n	80038e8 <_printf_common+0xcc>
 80038b2:	2000      	movs	r0, #0
 80038b4:	e008      	b.n	80038c8 <_printf_common+0xac>
 80038b6:	2301      	movs	r3, #1
 80038b8:	4652      	mov	r2, sl
 80038ba:	4649      	mov	r1, r9
 80038bc:	4638      	mov	r0, r7
 80038be:	47c0      	blx	r8
 80038c0:	3001      	adds	r0, #1
 80038c2:	d103      	bne.n	80038cc <_printf_common+0xb0>
 80038c4:	f04f 30ff 	mov.w	r0, #4294967295
 80038c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038cc:	3501      	adds	r5, #1
 80038ce:	e7c4      	b.n	800385a <_printf_common+0x3e>
 80038d0:	2030      	movs	r0, #48	; 0x30
 80038d2:	18e1      	adds	r1, r4, r3
 80038d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038d8:	1c5a      	adds	r2, r3, #1
 80038da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038de:	4422      	add	r2, r4
 80038e0:	3302      	adds	r3, #2
 80038e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038e6:	e7c5      	b.n	8003874 <_printf_common+0x58>
 80038e8:	2301      	movs	r3, #1
 80038ea:	4622      	mov	r2, r4
 80038ec:	4649      	mov	r1, r9
 80038ee:	4638      	mov	r0, r7
 80038f0:	47c0      	blx	r8
 80038f2:	3001      	adds	r0, #1
 80038f4:	d0e6      	beq.n	80038c4 <_printf_common+0xa8>
 80038f6:	3601      	adds	r6, #1
 80038f8:	e7d9      	b.n	80038ae <_printf_common+0x92>
	...

080038fc <_printf_i>:
 80038fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003900:	7e0f      	ldrb	r7, [r1, #24]
 8003902:	4691      	mov	r9, r2
 8003904:	2f78      	cmp	r7, #120	; 0x78
 8003906:	4680      	mov	r8, r0
 8003908:	460c      	mov	r4, r1
 800390a:	469a      	mov	sl, r3
 800390c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800390e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003912:	d807      	bhi.n	8003924 <_printf_i+0x28>
 8003914:	2f62      	cmp	r7, #98	; 0x62
 8003916:	d80a      	bhi.n	800392e <_printf_i+0x32>
 8003918:	2f00      	cmp	r7, #0
 800391a:	f000 80d9 	beq.w	8003ad0 <_printf_i+0x1d4>
 800391e:	2f58      	cmp	r7, #88	; 0x58
 8003920:	f000 80a4 	beq.w	8003a6c <_printf_i+0x170>
 8003924:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003928:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800392c:	e03a      	b.n	80039a4 <_printf_i+0xa8>
 800392e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003932:	2b15      	cmp	r3, #21
 8003934:	d8f6      	bhi.n	8003924 <_printf_i+0x28>
 8003936:	a101      	add	r1, pc, #4	; (adr r1, 800393c <_printf_i+0x40>)
 8003938:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800393c:	08003995 	.word	0x08003995
 8003940:	080039a9 	.word	0x080039a9
 8003944:	08003925 	.word	0x08003925
 8003948:	08003925 	.word	0x08003925
 800394c:	08003925 	.word	0x08003925
 8003950:	08003925 	.word	0x08003925
 8003954:	080039a9 	.word	0x080039a9
 8003958:	08003925 	.word	0x08003925
 800395c:	08003925 	.word	0x08003925
 8003960:	08003925 	.word	0x08003925
 8003964:	08003925 	.word	0x08003925
 8003968:	08003ab7 	.word	0x08003ab7
 800396c:	080039d9 	.word	0x080039d9
 8003970:	08003a99 	.word	0x08003a99
 8003974:	08003925 	.word	0x08003925
 8003978:	08003925 	.word	0x08003925
 800397c:	08003ad9 	.word	0x08003ad9
 8003980:	08003925 	.word	0x08003925
 8003984:	080039d9 	.word	0x080039d9
 8003988:	08003925 	.word	0x08003925
 800398c:	08003925 	.word	0x08003925
 8003990:	08003aa1 	.word	0x08003aa1
 8003994:	682b      	ldr	r3, [r5, #0]
 8003996:	1d1a      	adds	r2, r3, #4
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	602a      	str	r2, [r5, #0]
 800399c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039a4:	2301      	movs	r3, #1
 80039a6:	e0a4      	b.n	8003af2 <_printf_i+0x1f6>
 80039a8:	6820      	ldr	r0, [r4, #0]
 80039aa:	6829      	ldr	r1, [r5, #0]
 80039ac:	0606      	lsls	r6, r0, #24
 80039ae:	f101 0304 	add.w	r3, r1, #4
 80039b2:	d50a      	bpl.n	80039ca <_printf_i+0xce>
 80039b4:	680e      	ldr	r6, [r1, #0]
 80039b6:	602b      	str	r3, [r5, #0]
 80039b8:	2e00      	cmp	r6, #0
 80039ba:	da03      	bge.n	80039c4 <_printf_i+0xc8>
 80039bc:	232d      	movs	r3, #45	; 0x2d
 80039be:	4276      	negs	r6, r6
 80039c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039c4:	230a      	movs	r3, #10
 80039c6:	485e      	ldr	r0, [pc, #376]	; (8003b40 <_printf_i+0x244>)
 80039c8:	e019      	b.n	80039fe <_printf_i+0x102>
 80039ca:	680e      	ldr	r6, [r1, #0]
 80039cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80039d0:	602b      	str	r3, [r5, #0]
 80039d2:	bf18      	it	ne
 80039d4:	b236      	sxthne	r6, r6
 80039d6:	e7ef      	b.n	80039b8 <_printf_i+0xbc>
 80039d8:	682b      	ldr	r3, [r5, #0]
 80039da:	6820      	ldr	r0, [r4, #0]
 80039dc:	1d19      	adds	r1, r3, #4
 80039de:	6029      	str	r1, [r5, #0]
 80039e0:	0601      	lsls	r1, r0, #24
 80039e2:	d501      	bpl.n	80039e8 <_printf_i+0xec>
 80039e4:	681e      	ldr	r6, [r3, #0]
 80039e6:	e002      	b.n	80039ee <_printf_i+0xf2>
 80039e8:	0646      	lsls	r6, r0, #25
 80039ea:	d5fb      	bpl.n	80039e4 <_printf_i+0xe8>
 80039ec:	881e      	ldrh	r6, [r3, #0]
 80039ee:	2f6f      	cmp	r7, #111	; 0x6f
 80039f0:	bf0c      	ite	eq
 80039f2:	2308      	moveq	r3, #8
 80039f4:	230a      	movne	r3, #10
 80039f6:	4852      	ldr	r0, [pc, #328]	; (8003b40 <_printf_i+0x244>)
 80039f8:	2100      	movs	r1, #0
 80039fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80039fe:	6865      	ldr	r5, [r4, #4]
 8003a00:	2d00      	cmp	r5, #0
 8003a02:	bfa8      	it	ge
 8003a04:	6821      	ldrge	r1, [r4, #0]
 8003a06:	60a5      	str	r5, [r4, #8]
 8003a08:	bfa4      	itt	ge
 8003a0a:	f021 0104 	bicge.w	r1, r1, #4
 8003a0e:	6021      	strge	r1, [r4, #0]
 8003a10:	b90e      	cbnz	r6, 8003a16 <_printf_i+0x11a>
 8003a12:	2d00      	cmp	r5, #0
 8003a14:	d04d      	beq.n	8003ab2 <_printf_i+0x1b6>
 8003a16:	4615      	mov	r5, r2
 8003a18:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a1c:	fb03 6711 	mls	r7, r3, r1, r6
 8003a20:	5dc7      	ldrb	r7, [r0, r7]
 8003a22:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a26:	4637      	mov	r7, r6
 8003a28:	42bb      	cmp	r3, r7
 8003a2a:	460e      	mov	r6, r1
 8003a2c:	d9f4      	bls.n	8003a18 <_printf_i+0x11c>
 8003a2e:	2b08      	cmp	r3, #8
 8003a30:	d10b      	bne.n	8003a4a <_printf_i+0x14e>
 8003a32:	6823      	ldr	r3, [r4, #0]
 8003a34:	07de      	lsls	r6, r3, #31
 8003a36:	d508      	bpl.n	8003a4a <_printf_i+0x14e>
 8003a38:	6923      	ldr	r3, [r4, #16]
 8003a3a:	6861      	ldr	r1, [r4, #4]
 8003a3c:	4299      	cmp	r1, r3
 8003a3e:	bfde      	ittt	le
 8003a40:	2330      	movle	r3, #48	; 0x30
 8003a42:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a46:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a4a:	1b52      	subs	r2, r2, r5
 8003a4c:	6122      	str	r2, [r4, #16]
 8003a4e:	464b      	mov	r3, r9
 8003a50:	4621      	mov	r1, r4
 8003a52:	4640      	mov	r0, r8
 8003a54:	f8cd a000 	str.w	sl, [sp]
 8003a58:	aa03      	add	r2, sp, #12
 8003a5a:	f7ff fedf 	bl	800381c <_printf_common>
 8003a5e:	3001      	adds	r0, #1
 8003a60:	d14c      	bne.n	8003afc <_printf_i+0x200>
 8003a62:	f04f 30ff 	mov.w	r0, #4294967295
 8003a66:	b004      	add	sp, #16
 8003a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a6c:	4834      	ldr	r0, [pc, #208]	; (8003b40 <_printf_i+0x244>)
 8003a6e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003a72:	6829      	ldr	r1, [r5, #0]
 8003a74:	6823      	ldr	r3, [r4, #0]
 8003a76:	f851 6b04 	ldr.w	r6, [r1], #4
 8003a7a:	6029      	str	r1, [r5, #0]
 8003a7c:	061d      	lsls	r5, r3, #24
 8003a7e:	d514      	bpl.n	8003aaa <_printf_i+0x1ae>
 8003a80:	07df      	lsls	r7, r3, #31
 8003a82:	bf44      	itt	mi
 8003a84:	f043 0320 	orrmi.w	r3, r3, #32
 8003a88:	6023      	strmi	r3, [r4, #0]
 8003a8a:	b91e      	cbnz	r6, 8003a94 <_printf_i+0x198>
 8003a8c:	6823      	ldr	r3, [r4, #0]
 8003a8e:	f023 0320 	bic.w	r3, r3, #32
 8003a92:	6023      	str	r3, [r4, #0]
 8003a94:	2310      	movs	r3, #16
 8003a96:	e7af      	b.n	80039f8 <_printf_i+0xfc>
 8003a98:	6823      	ldr	r3, [r4, #0]
 8003a9a:	f043 0320 	orr.w	r3, r3, #32
 8003a9e:	6023      	str	r3, [r4, #0]
 8003aa0:	2378      	movs	r3, #120	; 0x78
 8003aa2:	4828      	ldr	r0, [pc, #160]	; (8003b44 <_printf_i+0x248>)
 8003aa4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003aa8:	e7e3      	b.n	8003a72 <_printf_i+0x176>
 8003aaa:	0659      	lsls	r1, r3, #25
 8003aac:	bf48      	it	mi
 8003aae:	b2b6      	uxthmi	r6, r6
 8003ab0:	e7e6      	b.n	8003a80 <_printf_i+0x184>
 8003ab2:	4615      	mov	r5, r2
 8003ab4:	e7bb      	b.n	8003a2e <_printf_i+0x132>
 8003ab6:	682b      	ldr	r3, [r5, #0]
 8003ab8:	6826      	ldr	r6, [r4, #0]
 8003aba:	1d18      	adds	r0, r3, #4
 8003abc:	6961      	ldr	r1, [r4, #20]
 8003abe:	6028      	str	r0, [r5, #0]
 8003ac0:	0635      	lsls	r5, r6, #24
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	d501      	bpl.n	8003aca <_printf_i+0x1ce>
 8003ac6:	6019      	str	r1, [r3, #0]
 8003ac8:	e002      	b.n	8003ad0 <_printf_i+0x1d4>
 8003aca:	0670      	lsls	r0, r6, #25
 8003acc:	d5fb      	bpl.n	8003ac6 <_printf_i+0x1ca>
 8003ace:	8019      	strh	r1, [r3, #0]
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	4615      	mov	r5, r2
 8003ad4:	6123      	str	r3, [r4, #16]
 8003ad6:	e7ba      	b.n	8003a4e <_printf_i+0x152>
 8003ad8:	682b      	ldr	r3, [r5, #0]
 8003ada:	2100      	movs	r1, #0
 8003adc:	1d1a      	adds	r2, r3, #4
 8003ade:	602a      	str	r2, [r5, #0]
 8003ae0:	681d      	ldr	r5, [r3, #0]
 8003ae2:	6862      	ldr	r2, [r4, #4]
 8003ae4:	4628      	mov	r0, r5
 8003ae6:	f000 f82f 	bl	8003b48 <memchr>
 8003aea:	b108      	cbz	r0, 8003af0 <_printf_i+0x1f4>
 8003aec:	1b40      	subs	r0, r0, r5
 8003aee:	6060      	str	r0, [r4, #4]
 8003af0:	6863      	ldr	r3, [r4, #4]
 8003af2:	6123      	str	r3, [r4, #16]
 8003af4:	2300      	movs	r3, #0
 8003af6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003afa:	e7a8      	b.n	8003a4e <_printf_i+0x152>
 8003afc:	462a      	mov	r2, r5
 8003afe:	4649      	mov	r1, r9
 8003b00:	4640      	mov	r0, r8
 8003b02:	6923      	ldr	r3, [r4, #16]
 8003b04:	47d0      	blx	sl
 8003b06:	3001      	adds	r0, #1
 8003b08:	d0ab      	beq.n	8003a62 <_printf_i+0x166>
 8003b0a:	6823      	ldr	r3, [r4, #0]
 8003b0c:	079b      	lsls	r3, r3, #30
 8003b0e:	d413      	bmi.n	8003b38 <_printf_i+0x23c>
 8003b10:	68e0      	ldr	r0, [r4, #12]
 8003b12:	9b03      	ldr	r3, [sp, #12]
 8003b14:	4298      	cmp	r0, r3
 8003b16:	bfb8      	it	lt
 8003b18:	4618      	movlt	r0, r3
 8003b1a:	e7a4      	b.n	8003a66 <_printf_i+0x16a>
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	4632      	mov	r2, r6
 8003b20:	4649      	mov	r1, r9
 8003b22:	4640      	mov	r0, r8
 8003b24:	47d0      	blx	sl
 8003b26:	3001      	adds	r0, #1
 8003b28:	d09b      	beq.n	8003a62 <_printf_i+0x166>
 8003b2a:	3501      	adds	r5, #1
 8003b2c:	68e3      	ldr	r3, [r4, #12]
 8003b2e:	9903      	ldr	r1, [sp, #12]
 8003b30:	1a5b      	subs	r3, r3, r1
 8003b32:	42ab      	cmp	r3, r5
 8003b34:	dcf2      	bgt.n	8003b1c <_printf_i+0x220>
 8003b36:	e7eb      	b.n	8003b10 <_printf_i+0x214>
 8003b38:	2500      	movs	r5, #0
 8003b3a:	f104 0619 	add.w	r6, r4, #25
 8003b3e:	e7f5      	b.n	8003b2c <_printf_i+0x230>
 8003b40:	08003e95 	.word	0x08003e95
 8003b44:	08003ea6 	.word	0x08003ea6

08003b48 <memchr>:
 8003b48:	4603      	mov	r3, r0
 8003b4a:	b510      	push	{r4, lr}
 8003b4c:	b2c9      	uxtb	r1, r1
 8003b4e:	4402      	add	r2, r0
 8003b50:	4293      	cmp	r3, r2
 8003b52:	4618      	mov	r0, r3
 8003b54:	d101      	bne.n	8003b5a <memchr+0x12>
 8003b56:	2000      	movs	r0, #0
 8003b58:	e003      	b.n	8003b62 <memchr+0x1a>
 8003b5a:	7804      	ldrb	r4, [r0, #0]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	428c      	cmp	r4, r1
 8003b60:	d1f6      	bne.n	8003b50 <memchr+0x8>
 8003b62:	bd10      	pop	{r4, pc}

08003b64 <memcpy>:
 8003b64:	440a      	add	r2, r1
 8003b66:	4291      	cmp	r1, r2
 8003b68:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b6c:	d100      	bne.n	8003b70 <memcpy+0xc>
 8003b6e:	4770      	bx	lr
 8003b70:	b510      	push	{r4, lr}
 8003b72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b76:	4291      	cmp	r1, r2
 8003b78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b7c:	d1f9      	bne.n	8003b72 <memcpy+0xe>
 8003b7e:	bd10      	pop	{r4, pc}

08003b80 <memmove>:
 8003b80:	4288      	cmp	r0, r1
 8003b82:	b510      	push	{r4, lr}
 8003b84:	eb01 0402 	add.w	r4, r1, r2
 8003b88:	d902      	bls.n	8003b90 <memmove+0x10>
 8003b8a:	4284      	cmp	r4, r0
 8003b8c:	4623      	mov	r3, r4
 8003b8e:	d807      	bhi.n	8003ba0 <memmove+0x20>
 8003b90:	1e43      	subs	r3, r0, #1
 8003b92:	42a1      	cmp	r1, r4
 8003b94:	d008      	beq.n	8003ba8 <memmove+0x28>
 8003b96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b9e:	e7f8      	b.n	8003b92 <memmove+0x12>
 8003ba0:	4601      	mov	r1, r0
 8003ba2:	4402      	add	r2, r0
 8003ba4:	428a      	cmp	r2, r1
 8003ba6:	d100      	bne.n	8003baa <memmove+0x2a>
 8003ba8:	bd10      	pop	{r4, pc}
 8003baa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003bae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003bb2:	e7f7      	b.n	8003ba4 <memmove+0x24>

08003bb4 <_free_r>:
 8003bb4:	b538      	push	{r3, r4, r5, lr}
 8003bb6:	4605      	mov	r5, r0
 8003bb8:	2900      	cmp	r1, #0
 8003bba:	d040      	beq.n	8003c3e <_free_r+0x8a>
 8003bbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bc0:	1f0c      	subs	r4, r1, #4
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	bfb8      	it	lt
 8003bc6:	18e4      	addlt	r4, r4, r3
 8003bc8:	f000 f910 	bl	8003dec <__malloc_lock>
 8003bcc:	4a1c      	ldr	r2, [pc, #112]	; (8003c40 <_free_r+0x8c>)
 8003bce:	6813      	ldr	r3, [r2, #0]
 8003bd0:	b933      	cbnz	r3, 8003be0 <_free_r+0x2c>
 8003bd2:	6063      	str	r3, [r4, #4]
 8003bd4:	6014      	str	r4, [r2, #0]
 8003bd6:	4628      	mov	r0, r5
 8003bd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bdc:	f000 b90c 	b.w	8003df8 <__malloc_unlock>
 8003be0:	42a3      	cmp	r3, r4
 8003be2:	d908      	bls.n	8003bf6 <_free_r+0x42>
 8003be4:	6820      	ldr	r0, [r4, #0]
 8003be6:	1821      	adds	r1, r4, r0
 8003be8:	428b      	cmp	r3, r1
 8003bea:	bf01      	itttt	eq
 8003bec:	6819      	ldreq	r1, [r3, #0]
 8003bee:	685b      	ldreq	r3, [r3, #4]
 8003bf0:	1809      	addeq	r1, r1, r0
 8003bf2:	6021      	streq	r1, [r4, #0]
 8003bf4:	e7ed      	b.n	8003bd2 <_free_r+0x1e>
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	b10b      	cbz	r3, 8003c00 <_free_r+0x4c>
 8003bfc:	42a3      	cmp	r3, r4
 8003bfe:	d9fa      	bls.n	8003bf6 <_free_r+0x42>
 8003c00:	6811      	ldr	r1, [r2, #0]
 8003c02:	1850      	adds	r0, r2, r1
 8003c04:	42a0      	cmp	r0, r4
 8003c06:	d10b      	bne.n	8003c20 <_free_r+0x6c>
 8003c08:	6820      	ldr	r0, [r4, #0]
 8003c0a:	4401      	add	r1, r0
 8003c0c:	1850      	adds	r0, r2, r1
 8003c0e:	4283      	cmp	r3, r0
 8003c10:	6011      	str	r1, [r2, #0]
 8003c12:	d1e0      	bne.n	8003bd6 <_free_r+0x22>
 8003c14:	6818      	ldr	r0, [r3, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	4401      	add	r1, r0
 8003c1a:	6011      	str	r1, [r2, #0]
 8003c1c:	6053      	str	r3, [r2, #4]
 8003c1e:	e7da      	b.n	8003bd6 <_free_r+0x22>
 8003c20:	d902      	bls.n	8003c28 <_free_r+0x74>
 8003c22:	230c      	movs	r3, #12
 8003c24:	602b      	str	r3, [r5, #0]
 8003c26:	e7d6      	b.n	8003bd6 <_free_r+0x22>
 8003c28:	6820      	ldr	r0, [r4, #0]
 8003c2a:	1821      	adds	r1, r4, r0
 8003c2c:	428b      	cmp	r3, r1
 8003c2e:	bf01      	itttt	eq
 8003c30:	6819      	ldreq	r1, [r3, #0]
 8003c32:	685b      	ldreq	r3, [r3, #4]
 8003c34:	1809      	addeq	r1, r1, r0
 8003c36:	6021      	streq	r1, [r4, #0]
 8003c38:	6063      	str	r3, [r4, #4]
 8003c3a:	6054      	str	r4, [r2, #4]
 8003c3c:	e7cb      	b.n	8003bd6 <_free_r+0x22>
 8003c3e:	bd38      	pop	{r3, r4, r5, pc}
 8003c40:	200001cc 	.word	0x200001cc

08003c44 <sbrk_aligned>:
 8003c44:	b570      	push	{r4, r5, r6, lr}
 8003c46:	4e0e      	ldr	r6, [pc, #56]	; (8003c80 <sbrk_aligned+0x3c>)
 8003c48:	460c      	mov	r4, r1
 8003c4a:	6831      	ldr	r1, [r6, #0]
 8003c4c:	4605      	mov	r5, r0
 8003c4e:	b911      	cbnz	r1, 8003c56 <sbrk_aligned+0x12>
 8003c50:	f000 f8bc 	bl	8003dcc <_sbrk_r>
 8003c54:	6030      	str	r0, [r6, #0]
 8003c56:	4621      	mov	r1, r4
 8003c58:	4628      	mov	r0, r5
 8003c5a:	f000 f8b7 	bl	8003dcc <_sbrk_r>
 8003c5e:	1c43      	adds	r3, r0, #1
 8003c60:	d00a      	beq.n	8003c78 <sbrk_aligned+0x34>
 8003c62:	1cc4      	adds	r4, r0, #3
 8003c64:	f024 0403 	bic.w	r4, r4, #3
 8003c68:	42a0      	cmp	r0, r4
 8003c6a:	d007      	beq.n	8003c7c <sbrk_aligned+0x38>
 8003c6c:	1a21      	subs	r1, r4, r0
 8003c6e:	4628      	mov	r0, r5
 8003c70:	f000 f8ac 	bl	8003dcc <_sbrk_r>
 8003c74:	3001      	adds	r0, #1
 8003c76:	d101      	bne.n	8003c7c <sbrk_aligned+0x38>
 8003c78:	f04f 34ff 	mov.w	r4, #4294967295
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	bd70      	pop	{r4, r5, r6, pc}
 8003c80:	200001d0 	.word	0x200001d0

08003c84 <_malloc_r>:
 8003c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c88:	1ccd      	adds	r5, r1, #3
 8003c8a:	f025 0503 	bic.w	r5, r5, #3
 8003c8e:	3508      	adds	r5, #8
 8003c90:	2d0c      	cmp	r5, #12
 8003c92:	bf38      	it	cc
 8003c94:	250c      	movcc	r5, #12
 8003c96:	2d00      	cmp	r5, #0
 8003c98:	4607      	mov	r7, r0
 8003c9a:	db01      	blt.n	8003ca0 <_malloc_r+0x1c>
 8003c9c:	42a9      	cmp	r1, r5
 8003c9e:	d905      	bls.n	8003cac <_malloc_r+0x28>
 8003ca0:	230c      	movs	r3, #12
 8003ca2:	2600      	movs	r6, #0
 8003ca4:	603b      	str	r3, [r7, #0]
 8003ca6:	4630      	mov	r0, r6
 8003ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cac:	4e2e      	ldr	r6, [pc, #184]	; (8003d68 <_malloc_r+0xe4>)
 8003cae:	f000 f89d 	bl	8003dec <__malloc_lock>
 8003cb2:	6833      	ldr	r3, [r6, #0]
 8003cb4:	461c      	mov	r4, r3
 8003cb6:	bb34      	cbnz	r4, 8003d06 <_malloc_r+0x82>
 8003cb8:	4629      	mov	r1, r5
 8003cba:	4638      	mov	r0, r7
 8003cbc:	f7ff ffc2 	bl	8003c44 <sbrk_aligned>
 8003cc0:	1c43      	adds	r3, r0, #1
 8003cc2:	4604      	mov	r4, r0
 8003cc4:	d14d      	bne.n	8003d62 <_malloc_r+0xde>
 8003cc6:	6834      	ldr	r4, [r6, #0]
 8003cc8:	4626      	mov	r6, r4
 8003cca:	2e00      	cmp	r6, #0
 8003ccc:	d140      	bne.n	8003d50 <_malloc_r+0xcc>
 8003cce:	6823      	ldr	r3, [r4, #0]
 8003cd0:	4631      	mov	r1, r6
 8003cd2:	4638      	mov	r0, r7
 8003cd4:	eb04 0803 	add.w	r8, r4, r3
 8003cd8:	f000 f878 	bl	8003dcc <_sbrk_r>
 8003cdc:	4580      	cmp	r8, r0
 8003cde:	d13a      	bne.n	8003d56 <_malloc_r+0xd2>
 8003ce0:	6821      	ldr	r1, [r4, #0]
 8003ce2:	3503      	adds	r5, #3
 8003ce4:	1a6d      	subs	r5, r5, r1
 8003ce6:	f025 0503 	bic.w	r5, r5, #3
 8003cea:	3508      	adds	r5, #8
 8003cec:	2d0c      	cmp	r5, #12
 8003cee:	bf38      	it	cc
 8003cf0:	250c      	movcc	r5, #12
 8003cf2:	4638      	mov	r0, r7
 8003cf4:	4629      	mov	r1, r5
 8003cf6:	f7ff ffa5 	bl	8003c44 <sbrk_aligned>
 8003cfa:	3001      	adds	r0, #1
 8003cfc:	d02b      	beq.n	8003d56 <_malloc_r+0xd2>
 8003cfe:	6823      	ldr	r3, [r4, #0]
 8003d00:	442b      	add	r3, r5
 8003d02:	6023      	str	r3, [r4, #0]
 8003d04:	e00e      	b.n	8003d24 <_malloc_r+0xa0>
 8003d06:	6822      	ldr	r2, [r4, #0]
 8003d08:	1b52      	subs	r2, r2, r5
 8003d0a:	d41e      	bmi.n	8003d4a <_malloc_r+0xc6>
 8003d0c:	2a0b      	cmp	r2, #11
 8003d0e:	d916      	bls.n	8003d3e <_malloc_r+0xba>
 8003d10:	1961      	adds	r1, r4, r5
 8003d12:	42a3      	cmp	r3, r4
 8003d14:	6025      	str	r5, [r4, #0]
 8003d16:	bf18      	it	ne
 8003d18:	6059      	strne	r1, [r3, #4]
 8003d1a:	6863      	ldr	r3, [r4, #4]
 8003d1c:	bf08      	it	eq
 8003d1e:	6031      	streq	r1, [r6, #0]
 8003d20:	5162      	str	r2, [r4, r5]
 8003d22:	604b      	str	r3, [r1, #4]
 8003d24:	4638      	mov	r0, r7
 8003d26:	f104 060b 	add.w	r6, r4, #11
 8003d2a:	f000 f865 	bl	8003df8 <__malloc_unlock>
 8003d2e:	f026 0607 	bic.w	r6, r6, #7
 8003d32:	1d23      	adds	r3, r4, #4
 8003d34:	1af2      	subs	r2, r6, r3
 8003d36:	d0b6      	beq.n	8003ca6 <_malloc_r+0x22>
 8003d38:	1b9b      	subs	r3, r3, r6
 8003d3a:	50a3      	str	r3, [r4, r2]
 8003d3c:	e7b3      	b.n	8003ca6 <_malloc_r+0x22>
 8003d3e:	6862      	ldr	r2, [r4, #4]
 8003d40:	42a3      	cmp	r3, r4
 8003d42:	bf0c      	ite	eq
 8003d44:	6032      	streq	r2, [r6, #0]
 8003d46:	605a      	strne	r2, [r3, #4]
 8003d48:	e7ec      	b.n	8003d24 <_malloc_r+0xa0>
 8003d4a:	4623      	mov	r3, r4
 8003d4c:	6864      	ldr	r4, [r4, #4]
 8003d4e:	e7b2      	b.n	8003cb6 <_malloc_r+0x32>
 8003d50:	4634      	mov	r4, r6
 8003d52:	6876      	ldr	r6, [r6, #4]
 8003d54:	e7b9      	b.n	8003cca <_malloc_r+0x46>
 8003d56:	230c      	movs	r3, #12
 8003d58:	4638      	mov	r0, r7
 8003d5a:	603b      	str	r3, [r7, #0]
 8003d5c:	f000 f84c 	bl	8003df8 <__malloc_unlock>
 8003d60:	e7a1      	b.n	8003ca6 <_malloc_r+0x22>
 8003d62:	6025      	str	r5, [r4, #0]
 8003d64:	e7de      	b.n	8003d24 <_malloc_r+0xa0>
 8003d66:	bf00      	nop
 8003d68:	200001cc 	.word	0x200001cc

08003d6c <_realloc_r>:
 8003d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d70:	4680      	mov	r8, r0
 8003d72:	4614      	mov	r4, r2
 8003d74:	460e      	mov	r6, r1
 8003d76:	b921      	cbnz	r1, 8003d82 <_realloc_r+0x16>
 8003d78:	4611      	mov	r1, r2
 8003d7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d7e:	f7ff bf81 	b.w	8003c84 <_malloc_r>
 8003d82:	b92a      	cbnz	r2, 8003d90 <_realloc_r+0x24>
 8003d84:	f7ff ff16 	bl	8003bb4 <_free_r>
 8003d88:	4625      	mov	r5, r4
 8003d8a:	4628      	mov	r0, r5
 8003d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d90:	f000 f838 	bl	8003e04 <_malloc_usable_size_r>
 8003d94:	4284      	cmp	r4, r0
 8003d96:	4607      	mov	r7, r0
 8003d98:	d802      	bhi.n	8003da0 <_realloc_r+0x34>
 8003d9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003d9e:	d812      	bhi.n	8003dc6 <_realloc_r+0x5a>
 8003da0:	4621      	mov	r1, r4
 8003da2:	4640      	mov	r0, r8
 8003da4:	f7ff ff6e 	bl	8003c84 <_malloc_r>
 8003da8:	4605      	mov	r5, r0
 8003daa:	2800      	cmp	r0, #0
 8003dac:	d0ed      	beq.n	8003d8a <_realloc_r+0x1e>
 8003dae:	42bc      	cmp	r4, r7
 8003db0:	4622      	mov	r2, r4
 8003db2:	4631      	mov	r1, r6
 8003db4:	bf28      	it	cs
 8003db6:	463a      	movcs	r2, r7
 8003db8:	f7ff fed4 	bl	8003b64 <memcpy>
 8003dbc:	4631      	mov	r1, r6
 8003dbe:	4640      	mov	r0, r8
 8003dc0:	f7ff fef8 	bl	8003bb4 <_free_r>
 8003dc4:	e7e1      	b.n	8003d8a <_realloc_r+0x1e>
 8003dc6:	4635      	mov	r5, r6
 8003dc8:	e7df      	b.n	8003d8a <_realloc_r+0x1e>
	...

08003dcc <_sbrk_r>:
 8003dcc:	b538      	push	{r3, r4, r5, lr}
 8003dce:	2300      	movs	r3, #0
 8003dd0:	4d05      	ldr	r5, [pc, #20]	; (8003de8 <_sbrk_r+0x1c>)
 8003dd2:	4604      	mov	r4, r0
 8003dd4:	4608      	mov	r0, r1
 8003dd6:	602b      	str	r3, [r5, #0]
 8003dd8:	f7fc ff98 	bl	8000d0c <_sbrk>
 8003ddc:	1c43      	adds	r3, r0, #1
 8003dde:	d102      	bne.n	8003de6 <_sbrk_r+0x1a>
 8003de0:	682b      	ldr	r3, [r5, #0]
 8003de2:	b103      	cbz	r3, 8003de6 <_sbrk_r+0x1a>
 8003de4:	6023      	str	r3, [r4, #0]
 8003de6:	bd38      	pop	{r3, r4, r5, pc}
 8003de8:	200001d4 	.word	0x200001d4

08003dec <__malloc_lock>:
 8003dec:	4801      	ldr	r0, [pc, #4]	; (8003df4 <__malloc_lock+0x8>)
 8003dee:	f000 b811 	b.w	8003e14 <__retarget_lock_acquire_recursive>
 8003df2:	bf00      	nop
 8003df4:	200001d8 	.word	0x200001d8

08003df8 <__malloc_unlock>:
 8003df8:	4801      	ldr	r0, [pc, #4]	; (8003e00 <__malloc_unlock+0x8>)
 8003dfa:	f000 b80c 	b.w	8003e16 <__retarget_lock_release_recursive>
 8003dfe:	bf00      	nop
 8003e00:	200001d8 	.word	0x200001d8

08003e04 <_malloc_usable_size_r>:
 8003e04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e08:	1f18      	subs	r0, r3, #4
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	bfbc      	itt	lt
 8003e0e:	580b      	ldrlt	r3, [r1, r0]
 8003e10:	18c0      	addlt	r0, r0, r3
 8003e12:	4770      	bx	lr

08003e14 <__retarget_lock_acquire_recursive>:
 8003e14:	4770      	bx	lr

08003e16 <__retarget_lock_release_recursive>:
 8003e16:	4770      	bx	lr

08003e18 <_init>:
 8003e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e1a:	bf00      	nop
 8003e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e1e:	bc08      	pop	{r3}
 8003e20:	469e      	mov	lr, r3
 8003e22:	4770      	bx	lr

08003e24 <_fini>:
 8003e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e26:	bf00      	nop
 8003e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e2a:	bc08      	pop	{r3}
 8003e2c:	469e      	mov	lr, r3
 8003e2e:	4770      	bx	lr
